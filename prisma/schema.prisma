// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String              @id @default(cuid())
  name              String?
  email             String?             @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              UserRole            @default(STUDENT)
  accounts          Account[]
  sessions          Session[]
  profile           Profile?
  createdAssessments Assessment[]        @relation("CreatedAssessments")
  takenAssessments  AssessmentResponse[] @relation("TakenAssessments")
  passwordResets    PasswordReset[]
  emailVerifications EmailVerification[]
  createdResources  Resource[]          @relation("CreatedResources")
  savedResources    SavedResource[]
  resourceRatings   ResourceRating[]
  resourceComments  ResourceComment[]
}

model PasswordReset {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model EmailVerification {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio         String?  @db.Text
  location    String?
  website     String?
  occupation  String?
  institution String?
  interests   String[] @default([])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  STUDENT
  TEACHER
  PROFESSIONAL
  ADMIN
}

// Assessment Models
model Assessment {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  type        String
  subject     String?
  keyStage    String?
  timeLimit   Int?     // in minutes
  passingScore Int?
  isPublished Boolean  @default(false)
  createdById String
  createdBy   User     @relation("CreatedAssessments", fields: [createdById], references: [id])
  questions   Question[]
  responses   AssessmentResponse[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Question {
  id           String   @id @default(cuid())
  assessmentId String
  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  type         String
  content      String   @db.Text
  options      Json?
  correctAnswer Json?
  points       Int      @default(1)
  order        Int
  responses    QuestionResponse[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model AssessmentResponse {
  id           String   @id @default(cuid())
  assessmentId String
  assessment   Assessment @relation(fields: [assessmentId], references: [id])
  userId       String
  user         User     @relation("TakenAssessments", fields: [userId], references: [id])
  startedAt    DateTime @default(now())
  submittedAt  DateTime?
  score        Int?
  maxScore     Int?
  passed       Boolean?
  responses    QuestionResponse[]
  feedback     String?  @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model QuestionResponse {
  id                  String   @id @default(cuid())
  assessmentResponseId String
  assessmentResponse   AssessmentResponse @relation(fields: [assessmentResponseId], references: [id], onDelete: Cascade)
  questionId          String
  question            Question @relation(fields: [questionId], references: [id])
  answer              Json?
  isCorrect           Boolean?
  score               Int?
  feedback            String?  @db.Text
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// Resource Library Models
model Resource {
  id                String   @id @default(cuid())
  title             String
  description       String   @db.Text
  subject           String
  keyStage          String
  type              String
  authorId          String
  author            User     @relation("CreatedResources", fields: [authorId], references: [id])
  files             Json[]   // Array of file URLs and metadata
  thumbnail         String?
  tags              String[]
  downloads         Int      @default(0)
  rating            Float?
  isPublic          Boolean  @default(true)
  allowDownload     Boolean  @default(true)
  requireAttribution Boolean  @default(true)
  savedBy           SavedResource[]
  ratings           ResourceRating[]
  comments          ResourceComment[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model SavedResource {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resourceId String
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([userId, resourceId])
}

model ResourceRating {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resourceId String
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  rating     Int      // 1-5 stars
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, resourceId])
}

model ResourceComment {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resourceId String
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  content    String   @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
