// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String                  @id @default(cuid())
  name                  String?
  email                 String?                 @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  String                  @default("user")
  accounts              Account[]
  sessions              Session[]
  assessments           Assessment[]
  assessmentResponses   AssessmentResponse[]
  resources             Resource[]
  curriculumPlans       CurriculumPlan[]
  collaborations        Collaboration[]
  learningStyleProfiles LearningStyleProfile[]
  contentTransformations ContentTransformation[]
  emotionalCheckins     EmotionalCheckin[]
  speechRecognitionLogs SpeechRecognitionLog[]
  curriculumDifferentiations CurriculumDifferentiation[]
  multiModalContents    MultiModalContent[]
  adaptiveContents      AdaptiveContent[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Assessment {
  id          String               @id @default(cuid())
  title       String
  description String?
  questions   Json
  published   Boolean              @default(false)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  userId      String
  user        User                 @relation(fields: [userId], references: [id])
  responses   AssessmentResponse[]
}

model AssessmentResponse {
  id           String     @id @default(cuid())
  answers      Json
  score        Float?
  feedback     String?
  submittedAt  DateTime   @default(now())
  assessmentId String
  assessment   Assessment @relation(fields: [assessmentId], references: [id])
  userId       String
  user         User       @relation(fields: [userId], references: [id])
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String?
  fileUrl     String?
  fileType    String?
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model CurriculumPlan {
  id            String         @id @default(cuid())
  title         String
  description   String?
  objectives    Json
  content       Json
  gradeLevel    String?
  subject       String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  collaborations Collaboration[]
  differentiations CurriculumDifferentiation[]
}

model Collaboration {
  id               String         @id @default(cuid())
  role             String         @default("viewer") // owner, editor, viewer
  curriculumPlanId String
  curriculumPlan   CurriculumPlan @relation(fields: [curriculumPlanId], references: [id])
  userId           String
  user             User           @relation(fields: [userId], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@unique([curriculumPlanId, userId])
}

model LearningStyleProfile {
  id                 String   @id @default(cuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id])
  primaryStyle       String
  secondaryStyle     String
  visualScore        Float
  auditoryScore      Float
  kinestheticScore   Float
  readingWritingScore Float
  rawResults         String   @db.Text
  answers            String   @db.Text
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model ContentTransformation {
  id                    String   @id @default(cuid())
  userId                String
  user                  User     @relation(fields: [userId], references: [id])
  originalContent       String   @db.Text
  contentType           String   @default("lesson")
  subjectArea           String?
  targetAge             Int      @default(10)
  complexity            Int      @default(50)
  learningStylePreference String?
  visualContent         String   @db.Text
  auditoryContent       String   @db.Text
  kinestheticContent    String   @db.Text
  readingWritingContent String   @db.Text
  multimodalContent     String   @db.Text
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model EmotionalCheckin {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  mood              String
  intensity         Int
  context           String?
  reflection        String?
  strategies        String[] 
  aiSuggestions     String?  @db.Text
  createdAt         DateTime @default(now())
}

model SpeechRecognitionLog {
  id                    String   @id @default(cuid())
  userId                String
  user                  User     @relation(fields: [userId], references: [id])
  originalTranscript    String   @db.Text
  enhancedTranscript    String   @db.Text
  childVoiceOptimization Boolean  @default(true)
  language              String   @default("en-GB")
  confidenceScore       Float?
  duration              Float?
  createdAt             DateTime @default(now())
}

model CurriculumDifferentiation {
  id                    String   @id @default(cuid())
  userId                String
  user                  User     @relation(fields: [userId], references: [id])
  curriculumPlanId      String?
  curriculumPlan        CurriculumPlan? @relation(fields: [curriculumPlanId], references: [id])
  originalContent       String   @db.Text
  differentiatedContent Json
  settings              Json
  subject               String?
  keyStage              String?
  year                  String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model MultiModalContent {
  id                    String   @id @default(cuid())
  userId                String
  user                  User     @relation(fields: [userId], references: [id])
  title                 String
  originalContent       String   @db.Text
  multiModalContent     Json
  settings              Json
  subject               String?
  keyStage              String?
  sourceContentId       String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model AdaptiveContent {
  id                    String   @id @default(cuid())
  userId                String
  user                  User     @relation(fields: [userId], references: [id])
  title                 String
  originalContent       String   @db.Text
  adjustedContent       Json
  settings              Json
  subject               String?
  keyStage              String?
  sourceContentId       String?
  performanceMetricsUsed Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}
