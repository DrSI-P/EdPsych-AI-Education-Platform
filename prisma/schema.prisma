// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(uuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  role              Role      @default(USER)
  accounts          Account[]
  sessions          Session[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Special Educational Needs Support
  transitionPlans   TransitionPlan[]
  iep504Plans       IEP504Plan[]
  
  // Restorative Justice
  restorativeTrainingProgress RestorativeTrainingProgress[]
}

enum Role {
  USER
  TEACHER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Special Educational Needs Support Models
model TransitionPlan {
  id                String   @id @default(uuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  studentName       String
  transitionType    String
  currentSetting    String
  targetSetting     String
  startDate         DateTime
  targetDate        DateTime
  strengths         String[]
  needs             String[]
  preferences       String[]
  goals             TransitionGoal[]
  teamMembers       TransitionTeamMember[]
  resources         TransitionResource[]
  accommodations    TransitionAccommodation[]
  notes             String?
  status            String   @default("active")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model TransitionGoal {
  id              String         @id @default(uuid())
  transitionPlanId String
  transitionPlan  TransitionPlan @relation(fields: [transitionPlanId], references: [id], onDelete: Cascade)
  category        String
  description     String
  steps           String[]
  targetDate      DateTime
  status          String         @default("not-started")
  progress        Int            @default(0)
  notes           String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model TransitionTeamMember {
  id              String         @id @default(uuid())
  transitionPlanId String
  transitionPlan  TransitionPlan @relation(fields: [transitionPlanId], references: [id], onDelete: Cascade)
  name            String
  role            String
  contactInfo     String?
  responsibilities String[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model TransitionResource {
  id              String         @id @default(uuid())
  transitionPlanId String
  transitionPlan  TransitionPlan @relation(fields: [transitionPlanId], references: [id], onDelete: Cascade)
  name            String
  type            String
  description     String?
  url             String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model TransitionAccommodation {
  id              String         @id @default(uuid())
  transitionPlanId String
  transitionPlan  TransitionPlan @relation(fields: [transitionPlanId], references: [id], onDelete: Cascade)
  category        String
  description     String
  implementation  String?
  effectiveness   String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model IEP504Plan {
  id                String   @id @default(uuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  planType          String   // "IEP" or "504"
  studentName       String
  dateOfBirth       DateTime?
  schoolName        String?
  yearGroup         String?
  startDate         DateTime
  reviewDate        DateTime
  strengths         String[]
  needs             String[]
  parentInput       String?
  studentInput      String?
  goals             IEP504Goal[]
  accommodations    IEP504Accommodation[]
  services          IEP504Service[]
  teamMembers       IEP504TeamMember[]
  notes             String?
  status            String   @default("active")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model IEP504Goal {
  id              String     @id @default(uuid())
  planId          String
  plan            IEP504Plan @relation(fields: [planId], references: [id], onDelete: Cascade)
  area            String
  description     String
  currentLevel    String?
  targetLevel     String
  strategies      String[]
  evaluation      String?
  timeline        String?
  progress        Int        @default(0)
  status          String     @default("in-progress")
  notes           String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model IEP504Accommodation {
  id              String     @id @default(uuid())
  planId          String
  plan            IEP504Plan @relation(fields: [planId], references: [id], onDelete: Cascade)
  category        String
  description     String
  implementation  String?
  effectiveness   String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model IEP504Service {
  id              String     @id @default(uuid())
  planId          String
  plan            IEP504Plan @relation(fields: [planId], references: [id], onDelete: Cascade)
  name            String
  provider        String
  frequency       String
  duration        String
  startDate       DateTime
  endDate         DateTime?
  notes           String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model IEP504TeamMember {
  id              String     @id @default(uuid())
  planId          String
  plan            IEP504Plan @relation(fields: [planId], references: [id], onDelete: Cascade)
  name            String
  role            String
  contactInfo     String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

// Restorative Justice Models
model RestorativeTrainingModule {
  id          String   @id @default(uuid())
  title       String
  description String
  duration    String
  level       String
  order       Int      @default(0)
  sections    RestorativeTrainingSection[]
  resources   RestorativeTrainingResource[]
  progress    RestorativeTrainingProgress[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model RestorativeTrainingSection {
  id          String   @id @default(uuid())
  moduleId    String
  module      RestorativeTrainingModule @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  title       String
  type        String
  content     String   @db.Text
  duration    String
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model RestorativeTrainingResource {
  id          String   @id @default(uuid())
  moduleId    String
  module      RestorativeTrainingModule @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  title       String
  type        String
  url         String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model RestorativeTrainingProgress {
  id                String   @id @default(uuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  moduleId          String
  module            RestorativeTrainingModule @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  completedSections String[]
  lastAccessed      DateTime @default(now())
  certificateIssued Boolean  @default(false)
  quizAttempts      RestorativeTrainingQuizAttempt[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([userId, moduleId])
}

model RestorativeTrainingQuizAttempt {
  id          String   @id @default(uuid())
  progressId  String
  progress    RestorativeTrainingProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  quizId      String
  score       Int
  attemptedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
