// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String                   @id @default(cuid())
  name                   String?
  email                  String?                  @unique
  emailVerified          DateTime?
  image                  String?
  role                   String                   @default("user")
  accounts               Account[]
  sessions               Session[]
  learningStyleProfile   LearningStyleProfile?
  emotionalCheckins      EmotionalCheckin[]
  teacherAutomation      TeacherAutomation[]
  contentTransformations ContentTransformation[]
  speechCalibrations     SpeechCalibration[]
  curriculumPlans        CurriculumPlan[]
  progressPacing         ProgressPacing[]
  executiveFunctionTasks ExecutiveFunctionTask[]
  accessibilitySettings  AccessibilitySettings?
  accessibilityLogs      AccessibilityLog[]
  personalizedInterventions PersonalizedInterventions?
  interventionLogs       InterventionLog[]
  progressMonitoring     ProgressMonitoring?
  monitoringGoals        MonitoringGoal[]
  monitoringLogs         MonitoringLog[]
  analyticsSettings      InterventionAnalyticsSettings?
  analyticsLogs          AnalyticsLog[]
  communicationSettings  CommunicationSettings?
  sentMessages           CommunicationMessage[]   @relation("SentMessages")
  receivedMessages       CommunicationMessage[]   @relation("ReceivedMessages")
  organizedMeetings      CommunicationMeeting[]   @relation("OrganizedMeetings")
  communicationLogs      CommunicationLog[]
  communicationReportRequests CommunicationReportRequest[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model LearningStyleProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  visual            Int
  auditory          Int
  readingWriting    Int
  kinesthetic       Int
  primaryStyle      String
  secondaryStyle    String
  recommendations   Json
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmotionalCheckin {
  id              String   @id @default(cuid())
  userId          String
  emotion         String
  intensity       Int
  context         String?
  notes           String?
  recommendations Json?
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TeacherAutomation {
  id                String   @id @default(cuid())
  userId            String
  documentType      String
  content           String   @db.Text
  generatedContent  String   @db.Text
  metadata          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ContentTransformation {
  id               String   @id @default(cuid())
  userId           String
  originalContent  String   @db.Text
  transformedContent String @db.Text
  learningStyle    String
  metadata         Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SpeechCalibration {
  id               String   @id @default(cuid())
  userId           String
  calibrationData  Json
  accuracy         Float
  noiseProfile     Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CurriculumPlan {
  id               String   @id @default(cuid())
  userId           String
  title            String
  description      String?
  subject          String
  yearGroup        String
  standards        Json
  content          Json
  differentiation  Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MultiModalContent {
  id               String   @id @default(cuid())
  title            String
  description      String?
  visualContent    String?  @db.Text
  audioContent     String?
  textContent      String?  @db.Text
  interactiveContent Json?
  metadata         Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model AdaptiveComplexity {
  id               String   @id @default(cuid())
  contentId        String
  levelName        String
  complexity       Int
  content          String   @db.Text
  scaffolding      Json?
  extensions       Json?
  assessments      Json?
  metadata         Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model ProgressPacing {
  id               String   @id @default(cuid())
  userId           String
  learningPath     String
  currentPace      Float
  recommendedPace  Float
  milestones       Json
  adaptations      Json?
  metadata         Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ExecutiveFunctionTask {
  id               String   @id @default(cuid())
  userId           String
  title            String
  description      String?
  dueDate          String?
  priority         String
  status           String
  steps            Json
  timeEstimate     Int
  visualReminder   String?
  tags             String[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AccessibilitySettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  textSize              Int      @default(100)
  lineSpacing           Int      @default(150)
  highContrastMode      Boolean  @default(false)
  dyslexiaFont          Boolean  @default(false)
  reducedMotion         Boolean  @default(false)
  voiceRecognitionActive Boolean  @default(false)
  textToSpeechActive    Boolean  @default(false)
  speechRate            Float    @default(1.0)
  speechPitch           Float    @default(1.0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AccessibilityLog {
  id               String   @id @default(cuid())
  userId           String
  feature          String
  options          String?
  textLength       Int?
  timestamp        DateTime @default(now())
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PersonalizedInterventions {
  id                  String   @id @default(cuid())
  userId              String   @unique
  enabled             Boolean  @default(false)
  learningProfile     String
  interventionType    String   @default("general")
  interventionLevel   String   @default("moderate")
  targetAreas         String   @db.Text
  customStrategies    String?  @db.Text
  progressTracking    Boolean  @default(true)
  reminderFrequency   String   @default("weekly")
  parentTeacherUpdates Boolean @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model InterventionLog {
  id                String   @id @default(cuid())
  userId            String
  action            String
  learningProfile   String
  interventionType  String
  interventionLevel String
  details           String?  @db.Text
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProgressMonitoring {
  id                  String   @id @default(cuid())
  userId              String   @unique
  enabled             Boolean  @default(false)
  monitoringFrequency String   @default("weekly")
  automaticReminders  Boolean  @default(true)
  dataVisualization   Boolean  @default(true)
  progressReports     Boolean  @default(true)
  goalTracking        Boolean  @default(true)
  interventionId      String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MonitoringGoal {
  id               String      @id @default(cuid())
  userId           String
  title            String
  description      String      @db.Text
  targetDate       DateTime
  baseline         Float
  target           Float
  currentValue     Float
  unit             String
  notes            String?     @db.Text
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  dataPoints       DataPoint[]
}

model DataPoint {
  id               String        @id @default(cuid())
  goalId           String
  date             DateTime
  value            Float
  notes            String?       @db.Text
  createdAt        DateTime      @default(now())
  goal             MonitoringGoal @relation(fields: [goalId], references: [id], onDelete: Cascade)
}

model MonitoringLog {
  id               String   @id @default(cuid())
  userId           String
  action           String
  details          String?  @db.Text
  createdAt        DateTime @default(now())
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model InterventionAnalyticsSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  enabled               Boolean  @default(false)
  dataSource            String   @default("all")
  timeRange             String   @default("term")
  groupBy               String   @default("intervention")
  comparisonEnabled     Boolean  @default(true)
  significanceThreshold Float    @default(0.05)
  automaticReports      Boolean  @default(true)
  selectedInterventions String[] @default([])
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AnalyticsLog {
  id               String   @id @default(cuid())
  userId           String
  action           String
  details          String?  @db.Text
  createdAt        DateTime @default(now())
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CommunicationSettings {
  id                  String   @id @default(cuid())
  userId              String   @unique
  emailNotifications  Boolean  @default(true)
  smsNotifications    Boolean  @default(false)
  autoTranslate       Boolean  @default(false)
  privacyMode         Boolean  @default(true)
  reminderFrequency   String   @default("weekly")
  messageTemplate     Boolean  @default(true)
  readReceipts        Boolean  @default(true)
  urgentFlagging      Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CommunicationMessage {
  id               String   @id @default(cuid())
  content          String   @db.Text
  senderId         String
  recipientId      String
  studentId        String
  urgent           Boolean  @default(false)
  read             Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  sender           User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  recipient        User     @relation("ReceivedMessages", fields: [recipientId], references: [id], onDelete: Cascade)
  student          Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  attachments      CommunicationAttachment[]
}

model CommunicationAttachment {
  id               String   @id @default(cuid())
  messageId        String
  name             String
  type             String
  size             String
  url              String
  createdAt        DateTime @default(now())
  message          CommunicationMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model CommunicationMeeting {
  id               String   @id @default(cuid())
  title            String
  description      String?  @db.Text
  meetingType      String   @default("parent_teacher")
  scheduledDate    DateTime
  duration         Int      @default(30)
  location         String
  organizerId      String
  studentId        String
  participantIds   String[]
  status           String   @default("scheduled")
  virtualMeetingUrl String?
  notes            String?  @db.Text
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  organizer        User     @relation("OrganizedMeetings", fields: [organizerId], references: [id], onDelete: Cascade)
  student          Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model CommunicationLog {
  id               String   @id @default(cuid())
  userId           String
  action           String
  details          String?  @db.Text
  createdAt        DateTime @default(now())
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CommunicationReportRequest {
  id               String   @id @default(cuid())
  userId           String
  reportType       String
  timeRange        String   @default("term")
  format           String   @default("pdf")
  status           String   @default("pending")
  resultUrl        String?
  customParameters Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Student {
  id               String   @id @default(cuid())
  name             String
  yearGroup        String
  supportNeeds     String[]
  messages         CommunicationMessage[]
  meetings         CommunicationMeeting[]
}
