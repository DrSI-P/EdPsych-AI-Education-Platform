// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  String    @default("user") // user, teacher, admin, parent, student
  accounts              Account[]
  sessions              Session[]
  profile               Profile?
  studentProfile        StudentProfile?
  teacherProfile        TeacherProfile?
  parentProfile         ParentProfile?
  createdCourses        Course[]
  createdLessons        Lesson[]
  enrollments           Enrollment[]
  progressReports       ProgressReport[]
  learningStyle         LearningStyle?
  courseProgress        CourseProgress[]
  organizerMeetings     CommunicationMeeting[] @relation("MeetingOrganizer")
  communicationLogs     CommunicationLog[]
  communicationSettings CommunicationSettings?
  notifications         Notification[]
  receivedMessages      Message[]
  sentMessages          Message[]              @relation("SentMessages")
  pupilVoiceResponses   PupilVoiceResponse[]
  createdSurveys        PupilVoiceSurvey[]
  contentTransformations ContentTransformation[]
  // Combined relations from both branches
  curriculumPlans       CurriculumPlan[]
  createdCurriculumPlans CurriculumPlan[] @relation("CreatedCurriculumPlans")
  curriculumDifferentiations CurriculumDifferentiation[]
  emotionalCheckins     EmotionalCheckin[]
  executiveFunctionProfile ExecutiveFunctionProfile?
  executiveFunctionTasks ExecutiveFunctionTask[]
  multiModalContents    MultiModalContent[]
  progressPacings       ProgressPacing[]
  adaptiveContents      AdaptiveContent[]
  speechCalibrations    SpeechCalibration[]
  speechRecognitionLogs SpeechRecognitionLog[]
  passwordReset         PasswordReset?
  curriculumCollaborations CurriculumPlanCollaborator[]
  curriculumComments    CurriculumPlanComment[]
  createdTasks          CurriculumPlanTask[]       @relation("TaskCreator")
  assignedTasks         CurriculumPlanTask[]       @relation("TaskAssignee")
  immersiveExperiences  ImmersiveExperience[]      // Relation to created immersive experiences
  immersiveExperienceReviews ImmersiveExperienceReview[] // Relation to immersive experience reviews
  immersiveTools        ImmersiveTool[]            // Relation to created immersive tools
  immersiveToolReviews  ImmersiveToolReview[]      // Relation to immersive tool reviews
  pluginCredentials     PluginCredential[]         // Relation to plugin credentials
  courseDiscussions     CourseDiscussion[]         // Relation to course discussions
  discussionReplies     DiscussionReply[]          // Relation to discussion replies
  cpdActivities         CPDActivity[]              // Relation to CPD activities
  cpdGoals              CPDGoal[]                  // Relation to CPD goals
  cpdReflections        CPDReflection[]            // Relation to CPD reflections
  cpdEvidence           CPDEvidence[]              // Relation to CPD evidence
  // Portfolio model relations
  portfolioProfile      PortfolioProfile?
  portfolioQualifications PortfolioQualification[]
  portfolioAchievements PortfolioAchievement[]
  portfolioEvidence     PortfolioEvidence[]
  portfolioReflections  PortfolioReflection[]
  // Mentorship model relations
  mentorshipProfile     Mentorship?
  // Relations from main branch
  createdAssessments    Assessment[]
  assessmentResponses   AssessmentResponse[]
  certificates          Certificate[]
  restorativeAgreements RestorativeAgreement[]
  circleTemplates       CircleTemplate[]
  activityFavorites     ActivityFavorite[]
  parentEducationFavorites ParentEducationFavorite[]
  reflectionPrompts     ReflectionPrompt[]
  restorativeTrainingProgress RestorativeTrainingProgress?
  learningDifferenceProfile LearningDifferenceProfile?
  mindfulnessSettings   MindfulnessSettings?
  mindfulnessLogs       MindfulnessLog[]
  accessibilitySettings AccessibilitySettings?
  accessibilityLogs     AccessibilityLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User Profile Models
model Profile {
  id                String   @id @default(cuid())
  userId            String   @unique
  bio               String?  @db.Text
  location          String?
  website           String?
  birthDate         DateTime?
  gender            String?
  phoneNumber       String?
  address           String?  @db.Text
  interests         String[] // Array of interests
  skills            String[] // Array of skills
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StudentProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  schoolId          String?
  yearGroup         String?
  keyStage          String?
  senStatus         String?  // SEN status (e.g., "None", "SEN Support", "EHCP")
  senNeeds          String[] // Array of SEN needs
  eal               Boolean  @default(false) // English as Additional Language
  fsm               Boolean  @default(false) // Free School Meals
  pp                Boolean  @default(false) // Pupil Premium
  lac               Boolean  @default(false) // Looked After Child
  gifted            Boolean  @default(false) // Gifted and Talented
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  school            School?  @relation(fields: [schoolId], references: [id])
  meetings          CommunicationMeeting[] @relation("StudentMeetings")
}

model CommunicationMeeting {
  id                String   @id @default(cuid())
  organizerId       String
  studentId         String
  title             String
  description       String?  @db.Text
  meetingDate       DateTime
  duration          Int      @default(60) // Duration in minutes
  location          String?
  meetingType       String   // in-person, virtual, phone
  meetingLink       String?
  status            String   @default("scheduled") // scheduled, completed, cancelled
  notes             String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  organizer         User     @relation("MeetingOrganizer", fields: [organizerId], references: [id])
  student           StudentProfile @relation("StudentMeetings", fields: [studentId], references: [id])
}

model CommunicationLog {
  id                String   @id @default(cuid())
  userId            String
  action            String   // email_sent, meeting_scheduled, document_shared, etc.
  details           String?  @db.Text // JSON string with action-specific details
  createdAt         DateTime @default(now())
  
  user              User     @relation(fields: [userId], references: [id])
}

model CommunicationSettings {
  id                String   @id @default(cuid())
  userId            String   @unique
  emailNotifications Boolean  @default(true)
  smsNotifications   Boolean  @default(false)
  reminderTime       Int      @default(24) // Hours before meeting
  language           String   @default("en-GB")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TeacherProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  schoolId          String?
  subjects          String[] // Subjects taught
  gradeLevel        String?
  certifications    String[] // Certifications
  educationHistory  String?  @db.Text
  teachingPhilosophy String? @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  school            School?  @relation(fields: [schoolId], references: [id])
}

model ParentProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  childrenIds       String[] // Array of student user IDs
  relationship      String?  // e.g., "Mother", "Father", "Guardian"
  preferredContactMethod String? // e.g., "Email", "Phone", "Text"
  availabilityTimes String?  // e.g., "Evenings", "Weekends"
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model School {
  id              String   @id @default(cuid())
  name            String
  address         String?  @db.Text
  city            String?
  country         String?
  postalCode      String?
  phoneNumber     String?
  email           String?
  website         String?
  type            String?  // e.g., "Public", "Private", "Charter"
  gradeRange      String?  // e.g., "K-5", "6-8", "9-12"
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  students        StudentProfile[]
  teachers        TeacherProfile[]
}

// Learning Models
model LearningStyle {
  id                String   @id @default(cuid())
  userId            String   @unique
  visual            Int      @default(0) // 0-100 scale
  auditory          Int      @default(0) // 0-100 scale
  readWrite         Int      @default(0) // 0-100 scale
  kinesthetic       Int      @default(0) // 0-100 scale
  sequential        Int      @default(0) // 0-100 scale
  global            Int      @default(0) // 0-100 scale
  active            Int      @default(0) // 0-100 scale
  reflective        Int      @default(0) // 0-100 scale
  verbal            Int      @default(0) // 0-100 scale
  intuitive         Int      @default(0) // 0-100 scale
  sensing           Int      @default(0) // 0-100 scale
  additionalStyles  Json?    // For other learning style models
  assessmentResults Json?    // Raw assessment data
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProgressReport {
  id                String   @id @default(cuid())
  userId            String
  courseId          String?
  lessonId          String?
  title             String
  content           String   @db.Text
  strengths         String[] // Areas of strength
  areasForImprovement String[] // Areas needing improvement
  recommendations   String   @db.Text
  nextSteps         String   @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course            Course?  @relation(fields: [courseId], references: [id])
  lesson            Lesson?  @relation(fields: [lessonId], references: [id])
}

// Curriculum Models
model Course {
  id                String   @id @default(cuid())
  creatorId         String
  title             String
  description       String   @db.Text
  subject           String
  gradeLevel        String
  difficulty        String   @default("intermediate") // beginner, intermediate, advanced
  learningObjectives String[] // Array of learning objectives
  prerequisites     String[] // Array of prerequisites
  duration          Int?     // Estimated duration in minutes
  imageUrl          String?
  isPublished       Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  creator           User     @relation(fields: [creatorId], references: [id])
  lessons           Lesson[]
  enrollments       Enrollment[]
  progressReports   ProgressReport[]
  assessments       Assessment[]
  courseProgress    CourseProgress[]
  certificates      Certificate[]
}

model Lesson {
  id                String   @id @default(cuid())
  courseId          String
  creatorId         String
  title             String
  description       String   @db.Text
  content           String   @db.Text
  videoUrl          String?
  audioUrl          String?
  imageUrl          String?
  order             Int      @default(0)
  duration          Int?     // Estimated duration in minutes
  isPublished       Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  course            Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  creator           User     @relation(fields: [creatorId], references: [id])
  progressReports   ProgressReport[]
  resources         Resource[]
  activities        Activity[]
}

model Resource {
  id                String   @id @default(cuid())
  lessonId          String
  title             String
  description       String?  @db.Text
  type              String   // pdf, video, audio, link, etc.
  url               String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lesson            Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model Activity {
  id                String   @id @default(cuid())
  lessonId          String
  title             String
  description       String   @db.Text
  type              String   // quiz, assignment, discussion, etc.
  content           String   @db.Text
  duration          Int?     // Estimated duration in minutes
  points            Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lesson            Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model Enrollment {
  id                String   @id @default(cuid())
  userId            String
  courseId          String
  status            String   @default("active") // active, completed, dropped
  progress          Int      @default(0) // 0-100 percentage
  startDate         DateTime @default(now())
  completionDate    DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course            Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
}

model CourseProgress {
  id                String   @id @default(cuid())
  userId            String
  courseId          String
  moduleId          String   @default("")
  contentId         String   @default("")
  progress          Int      @default(0)
  completed         Boolean  @default(false)
  timeSpent         Int      @default(0)
  lastAccessed      DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course            Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId, moduleId, contentId])
}

// Notification Models
model Notification {
  id                String   @id @default(cuid())
  userId            String
  title             String
  message           String   @db.Text
  type              String   // info, warning, error, success
  isRead            Boolean  @default(false)
  link              String?
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id                String   @id @default(cuid())
  senderId          String
  receiverId        String
  subject           String
  content           String   @db.Text
  isRead            Boolean  @default(false)
  createdAt         DateTime @default(now())
  sender            User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver          User     @relation(fields: [receiverId], references: [id], onDelete: Cascade)
}

// Pupil Voice Models
model PupilVoiceSurvey {
  id                String   @id @default(cuid())
  creatorId         String
  title             String
  description       String   @db.Text
  questions         Json     // Array of question objects
  isActive          Boolean  @default(true)
  startDate         DateTime @default(now())
  endDate           DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  creator           User     @relation(fields: [creatorId], references: [id])
  responses         PupilVoiceResponse[]
}

model PupilVoiceResponse {
  id                String   @id @default(cuid())
  surveyId          String
  userId            String
  answers           Json     // Array of answer objects
  createdAt         DateTime @default(now())
  survey            PupilVoiceSurvey @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([surveyId, userId])
}

// Content Transformation Models
model ContentTransformation {
  id                String   @id @default(cuid())
  userId            String
  originalContent   String   @db.Text
  transformedContent String   @db.Text
  transformationType String   // simplify, expand, visualize, etc.
  metadata          Json?    // Additional transformation metadata
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id])
}

// Curriculum Planning Models
model CurriculumPlan {
  id                String   @id @default(cuid())
  userId            String
  creatorId         String?
  title             String
  description       String   @db.Text
  subject           String
  gradeLevel        String
  objectives        String[] // Learning objectives
  duration          Int?     // Estimated duration in weeks
  status            String   @default("draft") // draft, in_progress, completed
  isPublic          Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
  creator           User?    @relation("CreatedCurriculumPlans", fields: [creatorId], references: [id])
  units             CurriculumUnit[]
  collaborators     CurriculumPlanCollaborator[]
  comments          CurriculumPlanComment[]
  tasks             CurriculumPlanTask[]
}

model CurriculumUnit {
  id                String   @id @default(cuid())
  planId            String
  title             String
  description       String   @db.Text
  objectives        String[] // Unit-specific objectives
  order             Int      @default(0)
  duration          Int?     // Estimated duration in days
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  plan              CurriculumPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  lessons           CurriculumLesson[]
}

model CurriculumLesson {
  id                String   @id @default(cuid())
  unitId            String
  title             String
  description       String   @db.Text
  objectives        String[] // Lesson-specific objectives
  content           String   @db.Text
  resources         Json?    // Array of resource objects
  activities        Json?    // Array of activity objects
  order             Int      @default(0)
  duration          Int?     // Estimated duration in minutes
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  unit              CurriculumUnit @relation(fields: [unitId], references: [id], onDelete: Cascade)
}

model CurriculumPlanCollaborator {
  id                String   @id @default(cuid())
  planId            String
  userId            String
  role              String   @default("viewer") // viewer, editor, admin
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  plan              CurriculumPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([planId, userId])
}

model CurriculumPlanComment {
  id                String   @id @default(cuid())
  planId            String
  userId            String
  content           String   @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  plan              CurriculumPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CurriculumPlanTask {
  id                String   @id @default(cuid())
  planId            String
  creatorId         String
  assigneeId        String?
  title             String
  description       String   @db.Text
  status            String   @default("todo") // todo, in_progress, completed
  dueDate           DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  plan              CurriculumPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  creator           User     @relation("TaskCreator", fields: [creatorId], references: [id])
  assignee          User?    @relation("TaskAssignee", fields: [assigneeId], references: [id])
}

// Curriculum Differentiation Models
model CurriculumDifferentiation {
  id                String   @id @default(cuid())
  userId            String
  originalContent   String   @db.Text
  differentiatedContent String   @db.Text
  differentiationType String   // simplify, challenge, support, etc.
  targetGroup       String   // SEN, EAL, gifted, etc.
  metadata          Json?    // Additional differentiation metadata
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id])
}

// Emotional Check-in Models
model EmotionalCheckin {
  id                String   @id @default(cuid())
  userId            String
  emotion           String
  intensity         Int      // 1-10 scale
  notes             String?  @db.Text
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id])
}

// Executive Function Models
model ExecutiveFunctionProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  planningScore     Int      @default(0) // 0-100 scale
  organizationScore Int      @default(0) // 0-100 scale
  timeManagementScore Int    @default(0) // 0-100 scale
  workingMemoryScore Int     @default(0) // 0-100 scale
  metacognitionScore Int     @default(0) // 0-100 scale
  responseInhibitionScore Int @default(0) // 0-100 scale
  emotionalControlScore Int  @default(0) // 0-100 scale
  taskInitiationScore Int    @default(0) // 0-100 scale
  flexibilityScore  Int      @default(0) // 0-100 scale
  goalDirectedPersistenceScore Int @default(0) // 0-100 scale
  assessmentResults Json?    // Raw assessment data
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ExecutiveFunctionTask {
  id                String   @id @default(cuid())
  userId            String
  title             String
  description       String   @db.Text
  category          String   // planning, organization, time_management, etc.
  status            String   @default("todo") // todo, in_progress, completed
  dueDate           DateTime?
  reminderDate      DateTime?
  priority          String   @default("medium") // low, medium, high
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
}

// Multi-Modal Content Models
model MultiModalContent {
  id                String   @id @default(cuid())
  userId            String
  title             String
  textContent       String   @db.Text
  visualContent     String?  // URL to visual content
  audioContent      String?  // URL to audio content
  videoContent      String?  // URL to video content
  interactiveContent String? // URL to interactive content
  metadata          Json?    // Additional content metadata
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
}

// Progress Pacing Models
model ProgressPacing {
  id                String   @id @default(cuid())
  userId            String
  contentId         String   // ID of the content being paced
  contentType       String   // course, lesson, unit, etc.
  recommendedPace   Int      // Recommended pace in minutes per day
  actualPace        Int      // Actual pace in minutes per day
  adjustmentReason  String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
}

// Adaptive Content Models
model AdaptiveContent {
  id                String   @id @default(cuid())
  userId            String
  originalContent   String   @db.Text
  adaptedContent    String   @db.Text
  adaptationType    String   // learning_style, difficulty, interest, etc.
  adaptationReason  String   @db.Text
  metadata          Json?    // Additional adaptation metadata
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id])
}

// Speech Recognition Models
model SpeechCalibration {
  id                String   @id @default(cuid())
  userId            String
  calibrationData   Json     // Calibration parameters
  accuracy          Float    // 0-1 scale
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
}

model SpeechRecognitionLog {
  id                String   @id @default(cuid())
  userId            String
  inputAudio        String?  // URL to audio file
  recognizedText    String   @db.Text
  confidence        Float    // 0-1 scale
  context           String?  // Context of the recognition (e.g., "assessment", "navigation")
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id])
}

// Password Reset Model
model PasswordReset {
  id                String   @id @default(cuid())
  userId            String   @unique
  token             String   @unique
  expires           DateTime
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Immersive Learning Models
model ImmersiveExperience {
  id                String   @id @default(cuid())
  creatorId         String
  title             String
  description       String   @db.Text
  subject           String
  gradeLevel        String
  objectives        String[] // Learning objectives
  content           String   @db.Text
  environmentType   String   // virtual_reality, augmented_reality, mixed_reality
  interactionMode   String   // guided, exploratory, collaborative
  duration          Int?     // Estimated duration in minutes
  accessUrl         String?  // URL to access the experience
  previewImageUrl   String?  // URL to preview image
  isPublished       Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  creator           User     @relation(fields: [creatorId], references: [id])
  reviews           ImmersiveExperienceReview[]
}

model ImmersiveExperienceReview {
  id                String   @id @default(cuid())
  experienceId      String
  userId            String
  rating            Int      // 1-5 scale
  review            String   @db.Text
  createdAt         DateTime @default(now())
  experience        ImmersiveExperience @relation(fields: [experienceId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id])
  
  @@unique([experienceId, userId])
}

model ImmersiveTool {
  id                String   @id @default(cuid())
  creatorId         String
  title             String
  description       String   @db.Text
  toolType          String   // creation_tool, visualization_tool, simulation_tool, etc.
  accessUrl         String?  // URL to access the tool
  documentationUrl  String?  // URL to documentation
  previewImageUrl   String?  // URL to preview image
  isPublished       Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  creator           User     @relation(fields: [creatorId], references: [id])
  reviews           ImmersiveToolReview[]
}

model ImmersiveToolReview {
  id                String   @id @default(cuid())
  toolId            String
  userId            String
  rating            Int      // 1-5 scale
  review            String   @db.Text
  createdAt         DateTime @default(now())
  tool              ImmersiveTool @relation(fields: [toolId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id])
  
  @@unique([toolId, userId])
}

// Plugin Models
model PluginCredential {
  id                String   @id @default(cuid())
  userId            String
  pluginName        String
  credentials       String   @db.Text // Encrypted credentials
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
  
  @@unique([userId, pluginName])
}

// Course Discussion Models
model CourseDiscussion {
  id                String   @id @default(cuid())
  courseId          String?
  userId            String
  title             String
  content           String   @db.Text
  isAnnouncement    Boolean  @default(false)
  isPinned          Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
  replies           DiscussionReply[]
}

model DiscussionReply {
  id                String   @id @default(cuid())
  discussionId      String
  userId            String
  content           String   @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  discussion        CourseDiscussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id])
}

// CPD Models
model CPDActivity {
  id                String   @id @default(cuid())
  userId            String
  title             String
  description       String   @db.Text
  activityType      String   // course, workshop, conference, reading, etc.
  provider          String?
  startDate         DateTime
  endDate           DateTime?
  duration          Int?     // Duration in hours
  status            String   @default("planned") // planned, in_progress, completed
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
}

model CPDGoal {
  id                String   @id @default(cuid())
  userId            String
  title             String
  description       String   @db.Text
  targetDate        DateTime?
  status            String   @default("active") // active, achieved, abandoned
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
}

model CPDReflection {
  id                String   @id @default(cuid())
  userId            String
  title             String
  content           String   @db.Text
  activityId        String?  // Optional reference to a CPD activity
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
}

model CPDEvidence {
  id                String   @id @default(cuid())
  userId            String
  title             String
  description       String   @db.Text
  fileUrl           String?  // URL to evidence file
  linkUrl           String?  // URL to external evidence
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
}

// Portfolio Models
model PortfolioProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  headline          String?
  summary           String?  @db.Text
  specialisms       String[]
  yearsOfExperience Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PortfolioQualification {
  id                String   @id @default(cuid())
  userId            String
  title             String
  institution       String
  dateObtained      DateTime?
  description       String?  @db.Text
  certificateUrl    String?  // URL to certificate
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
}

model PortfolioAchievement {
  id                String   @id @default(cuid())
  userId            String
  title             String
  description       String   @db.Text
  dateAchieved      DateTime?
  evidenceUrl       String?  // URL to evidence
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
}

model PortfolioEvidence {
  id                String   @id @default(cuid())
  userId            String
  title             String
  description       String   @db.Text
  evidenceType      String   // document, image, video, link, etc.
  fileUrl           String?  // URL to evidence file
  linkUrl           String?  // URL to external evidence
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
}

model PortfolioReflection {
  id                String   @id @default(cuid())
  userId            String
  title             String
  content           String   @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
}

// Mentorship Models
model Mentorship {
  id                String   @id @default(cuid())
  userId            String   @unique
  isMentor          Boolean  @default(false)
  isSeekingMentor   Boolean  @default(false)
  mentorshipAreas   String[] // Areas of mentorship interest
  mentorshipBio     String?  @db.Text
  availability      String?  // e.g., "Evenings", "Weekends"
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Assessment Models
model Assessment {
  id                String   @id @default(cuid())
  creatorId         String
  courseId          String?
  title             String
  description       String   @db.Text
  instructions      String   @db.Text
  questions         Json     // Array of question objects
  timeLimit         Int?     // Time limit in minutes
  passingScore      Int?     // Passing score percentage
  isPublished       Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  creator           User     @relation(fields: [creatorId], references: [id])
  course            Course?  @relation(fields: [courseId], references: [id])
  responses         AssessmentResponse[]
}

model AssessmentResponse {
  id                String   @id @default(cuid())
  assessmentId      String
  userId            String
  answers           Json     // Array of answer objects
  score             Int?     // Score percentage
  feedback          String?  @db.Text
  timeSpent         Int?     // Time spent in minutes
  startedAt         DateTime @default(now())
  completedAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  assessment        Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id])
}

// Certificate Models
model Certificate {
  id                String   @id @default(cuid())
  userId            String
  courseId          String
  title             String
  description       String?  @db.Text
  issueDate         DateTime @default(now())
  certificateUrl    String?  // URL to certificate file
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id])
  course            Course   @relation(fields: [courseId], references: [id])
}

// Restorative Justice Models
model RestorativeAgreement {
  id                String   @id @default(cuid())
  userId            String
  title             String
  participants      String[] // Array of participant names
  description       String   @db.Text
  agreements        Json     // Array of agreement items
  followUpDate      DateTime?
  status            String   @default("active") // active, completed, abandoned
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
}

model CircleTemplate {
  id                String   @id @default(cuid())
  userId            String
  title             String
  description       String   @db.Text
  openingPrompt     String   @db.Text
  discussionPrompts Json     // Array of discussion prompts
  closingPrompt     String   @db.Text
  suggestedDuration Int?     // Suggested duration in minutes
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
}

// Activity Favorites Models
model ActivityFavorite {
  id                String   @id @default(cuid())
  userId            String
  activityType      String   // game, exercise, discussion, etc.
  title             String
  description       String   @db.Text
  instructions      String   @db.Text
  materials         String?  @db.Text
  duration          Int?     // Duration in minutes
  ageRange          String?  // e.g., "5-7", "8-11", "12-16"
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
}

// Parent Education Models
model ParentEducationFavorite {
  id                String   @id @default(cuid())
  userId            String
  title             String
  description       String   @db.Text
  content           String   @db.Text
  category          String   // behavior, learning, development, etc.
  ageRange          String?  // e.g., "5-7", "8-11", "12-16"
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
}

// Reflection Prompt Models
model ReflectionPrompt {
  id                String   @id @default(cuid())
  userId            String
  prompt            String   @db.Text
  category          String   // behavior, learning, teaching, etc.
  targetAudience    String   // student, teacher, parent
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
}

// Restorative Training Models
model RestorativeTrainingProgress {
  id                String   @id @default(cuid())
  userId            String   @unique
  modulesCompleted  Int      @default(0)
  totalModules      Int      @default(5)
  certificateIssued Boolean  @default(false)
  lastActivity      DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Learning Difference Models
model LearningDifferenceProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  differences       String[] // Array of learning differences
  strengths         String[] // Array of strengths
  challenges        String[] // Array of challenges
  strategies        String[] // Array of effective strategies
  accommodations    String[] // Array of accommodations
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Mindfulness Models
model MindfulnessSettings {
  id                String   @id @default(cuid())
  userId            String   @unique
  reminderFrequency String   @default("daily") // daily, twice_daily, hourly, etc.
  reminderTimes     Json?    // Array of reminder times
  favoriteActivities String[] // Array of favorite mindfulness activities
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MindfulnessLog {
  id                String   @id @default(cuid())
  userId            String
  activityType      String   // breathing, body_scan, visualization, etc.
  duration          Int      // Duration in minutes
  notes             String?  @db.Text
  mood              String?  // before activity
  moodAfter         String?  // after activity
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id])
}

// Accessibility Models
model AccessibilitySettings {
  id                String   @id @default(cuid())
  userId            String   @unique
  highContrast      Boolean  @default(false)
  largeText         Boolean  @default(false)
  screenReader      Boolean  @default(false)
  reducedMotion     Boolean  @default(false)
  textToSpeech      Boolean  @default(false)
  speechToText      Boolean  @default(false)
  customSettings    Json?    // Additional custom settings
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AccessibilityLog {
  id                String   @id @default(cuid())
  userId            String
  featureUsed       String   // high_contrast, large_text, screen_reader, etc.
  context           String?  // Context of usage
  duration          Int?     // Duration of usage in minutes
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id])
}
