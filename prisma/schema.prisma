// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(cuid())
  name              String?
  email             String?             @unique
  emailVerified     DateTime?
  image             String?
  role              String              @default("user")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  accounts          Account[]
  sessions          Session[]
  transitionPlans   TransitionPlan[]
  iep504Plans       IEP504Plan[]
  teacherAlerts     TeacherAlert[]
  documentations    Documentation[]
  lessonPlans       LessonPlan[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Special Needs Support Models

model TransitionPlan {
  id                String   @id @default(cuid())
  title             String
  studentName       String
  transitionType    String
  currentSetting    String
  targetSetting     String
  startDate         DateTime
  endDate           DateTime
  strengths         String[]
  needs             String[]
  preferences       String[]
  goals             Json
  supportTeam       Json
  documents         Json?
  notes             String?
  status            String   @default("active")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  user              User     @relation(fields: [userId], references: [id])
}

model IEP504Plan {
  id                String   @id @default(cuid())
  title             String
  studentName       String
  dateOfBirth       DateTime
  schoolYear        String
  planType          String
  startDate         DateTime
  reviewDate        DateTime
  presentLevels     Json
  accommodations    Json
  goals             Json
  teamMembers       Json
  parentInput       String?
  studentInput      String?
  evaluationMethods String[]
  documents         Json?
  notes             String?
  status            String   @default("active")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  user              User     @relation(fields: [userId], references: [id])
}

model TeacherAlert {
  id                String   @id @default(cuid())
  studentName       String
  alertType         String
  description       String
  antecedent        String?
  behavior          String
  consequence       String?
  setting           String
  date              DateTime
  time              String?
  duration          String?
  intensity         Int?
  frequency         String?
  interventions     String[]
  effectiveStrategies String[]
  followUp          String?
  status            String   @default("active")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  user              User     @relation(fields: [userId], references: [id])
}

// Restorative Justice Models

model RestorativeConversation {
  id                String   @id @default(cuid())
  title             String
  participants      String[]
  date              DateTime
  framework         String
  questions         Json
  responses         Json
  agreements        Json?
  followUpDate      DateTime?
  status            String   @default("active")
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model CircleProcess {
  id                String   @id @default(cuid())
  title             String
  circleType        String
  participants      String[]
  date              DateTime
  openingCeremony   String?
  centerpiece       String?
  talkingPiece      String?
  questions         Json
  agreements        Json?
  closingCeremony   String?
  notes             String?
  status            String   @default("active")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model ReflectionPrompt {
  id                String   @id @default(cuid())
  title             String
  ageGroup          String
  category          String
  prompts           String[]
  guidanceNotes     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Agreement {
  id                String   @id @default(cuid())
  title             String
  participants      String[]
  date              DateTime
  agreements        Json
  checkInDates      DateTime[]
  checkInNotes      Json?
  status            String   @default("active")
  completionDate    DateTime?
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model CommunityActivity {
  id                String   @id @default(cuid())
  title             String
  activityType      String
  ageGroup          String
  timeRequired      String
  groupSize         String
  materials         String[]
  steps             Json
  variations        Json?
  objectives        String[]
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model StaffTrainingModule {
  id                String   @id @default(cuid())
  title             String
  level             String
  contentTypes      String[]
  duration          String
  objectives        String[]
  content           Json
  resources         Json?
  assessments       Json?
  completionCriteria Json
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model OutcomeMeasurement {
  id                String   @id @default(cuid())
  title             String
  measurementType   String
  targetGroup       String
  metrics           Json
  questions         Json?
  scoringGuide      Json?
  implementationNotes String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model ParentEducationResource {
  id                String   @id @default(cuid())
  title             String
  resourceType      String
  ageGroup          String
  difficultyLevel   String
  content           Json
  objectives        String[]
  implementationSteps Json?
  materials         String[]
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Teacher Administrative Automation Models

model Documentation {
  id                String   @id @default(cuid())
  title             String
  templateId        String
  content           Json
  metadata          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  user              User     @relation(fields: [userId], references: [id])
}

model LessonPlan {
  id                String   @id @default(cuid())
  title             String
  subject           String
  yearGroup         String
  templateId        String
  duration          String?
  objectives        String?
  content           Json
  learningStyles    String[]
  specialNeeds      String[]
  metadata          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  user              User     @relation(fields: [userId], references: [id])
}
