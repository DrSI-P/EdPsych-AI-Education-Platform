// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              String    @default("user")
  accounts          Account[]
  sessions          Session[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  verificationToken String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  
  // Profile information
  title             String?
  organization      String?
  bio               String?
  
  // Relationships
  assessments       Assessment[]
  responses         AssessmentResponse[]
  resources         Resource[]
  curriculumPlans   CurriculumPlan[]
  learningStyles    LearningStyleProfile[]
  emotionalCheckins EmotionalCheckin[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Assessment {
  id          String   @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  published   Boolean  @default(false)
  questions   Json
  type        String   @default("standard") // standard, pupil-voice, etc.
  
  // Relationships
  responses   AssessmentResponse[]
  standards   CurriculumStandardAssessment[]
}

model AssessmentResponse {
  id           String    @id @default(cuid())
  assessmentId String
  assessment   Assessment @relation(fields: [assessmentId], references: [id])
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  answers      Json
  score        Float?
  feedback     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  gradedAt     DateTime?
  gradedBy     String?
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        String   // document, video, image, link, etc.
  url         String?
  fileKey     String?
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  
  // Relationships
  curriculumPlans CurriculumPlanResource[]
}

model CurriculumPlan {
  id          String   @id @default(cuid())
  title       String
  description String?
  subject     String?
  gradeLevel  String?
  objectives  Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  
  // Relationships
  resources   CurriculumPlanResource[]
  standards   CurriculumStandard[]
  collaborators CurriculumCollaborator[]
}

model CurriculumPlanResource {
  id              String        @id @default(cuid())
  curriculumPlanId String
  curriculumPlan  CurriculumPlan @relation(fields: [curriculumPlanId], references: [id], onDelete: Cascade)
  resourceId      String
  resource        Resource       @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  order           Int            @default(0)
  
  @@unique([curriculumPlanId, resourceId])
}

model CurriculumStandard {
  id          String   @id @default(cuid())
  code        String
  description String
  subject     String
  gradeLevel  String
  category    String?
  
  // Relationships
  curriculumPlans CurriculumPlan[]
  assessments     CurriculumStandardAssessment[]
}

model CurriculumStandardAssessment {
  id                 String            @id @default(cuid())
  curriculumStandardId String
  curriculumStandard CurriculumStandard @relation(fields: [curriculumStandardId], references: [id], onDelete: Cascade)
  assessmentId       String
  assessment         Assessment         @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  
  @@unique([curriculumStandardId, assessmentId])
}

model CurriculumCollaborator {
  id              String        @id @default(cuid())
  curriculumPlanId String
  curriculumPlan  CurriculumPlan @relation(fields: [curriculumPlanId], references: [id], onDelete: Cascade)
  email           String
  role            String        // owner, editor, viewer
  inviteAccepted  Boolean       @default(false)
  invitedAt       DateTime      @default(now())
  
  @@unique([curriculumPlanId, email])
}

model LearningStyleProfile {
  id                 String   @id @default(cuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id])
  primaryStyle       String
  secondaryStyle     String
  visualScore        Float
  auditoryScore      Float
  kinestheticScore   Float
  readingWritingScore Float
  rawResults         String   @db.Text
  answers            String   @db.Text
  createdAt          DateTime @default(now())
}

model EmotionalCheckin {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  mood        String
  intensity   Int
  notes       String?
  triggers    String[]
  strategies  String[]
  createdAt   DateTime @default(now())
}

model ImmersiveExperience {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        String   // vr, ar, simulation
  content     String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
}
