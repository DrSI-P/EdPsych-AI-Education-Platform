// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  String    @default("user") // user, teacher, admin, parent, student
  accounts              Account[]
  sessions              Session[]
  profile               Profile?
  studentProfile        StudentProfile?
  teacherProfile        TeacherProfile?
  parentProfile         ParentProfile?
  createdCourses        Course[]
  createdLessons        Lesson[]
  enrollments           Enrollment[]
  progressReports       ProgressReport[]
  learningStyle         LearningStyle?
  courseProgress        CourseProgress[]
  organizerMeetings     CommunicationMeeting[] @relation("MeetingOrganizer")
  communicationLogs     CommunicationLog[]
  communicationSettings CommunicationSettings?
  notifications         Notification[]
  receivedMessages      Message[]
  sentMessages          Message[]              @relation("SentMessages")
  pupilVoiceResponses   PupilVoiceResponse[]
  createdSurveys        PupilVoiceSurvey[]
  contentTransformations ContentTransformation[]
  createdCurriculumPlans CurriculumPlan[]
  createdAssessments    Assessment[]
  assessmentResponses   AssessmentResponse[]
  certificates          Certificate[]
  restorativeAgreements RestorativeAgreement[]
  circleTemplates       CircleTemplate[]
  activityFavorites     ActivityFavorite[]
  parentEducationFavorites ParentEducationFavorite[]
  reflectionPrompts     ReflectionPrompt[]
  restorativeTrainingProgress RestorativeTrainingProgress?
  learningDifferenceProfile LearningDifferenceProfile?
  mindfulnessSettings   MindfulnessSettings?
  mindfulnessLogs       MindfulnessLog[]
  accessibilitySettings AccessibilitySettings?
  accessibilityLogs     AccessibilityLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User Profile Models
model Profile {
  id                String   @id @default(cuid())
  userId            String   @unique
  bio               String?  @db.Text
  location          String?
  website           String?
  birthDate         DateTime?
  gender            String?
  phoneNumber       String?
  address           String?  @db.Text
  interests         String[] // Array of interests
  skills            String[] // Array of skills
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StudentProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  schoolId          String?
  yearGroup         String?
  keyStage          String?
  senStatus         String?  // SEN status (e.g., "None", "SEN Support", "EHCP")
  senNeeds          String[] // Array of SEN needs
  eal               Boolean  @default(false) // English as Additional Language
  fsm               Boolean  @default(false) // Free School Meals
  pp                Boolean  @default(false) // Pupil Premium
  lac               Boolean  @default(false) // Looked After Child
  gifted            Boolean  @default(false) // Gifted and Talented
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  school            School?  @relation(fields: [schoolId], references: [id])
  meetings          CommunicationMeeting[] @relation("StudentMeetings")
}

model CommunicationMeeting {
  id                String   @id @default(cuid())
  organizerId       String
  studentId         String
  title             String
  description       String?  @db.Text
  meetingDate       DateTime
  duration          Int      @default(60) // Duration in minutes
  location          String?
  meetingType       String   // in-person, virtual, phone
  meetingLink       String?
  status            String   @default("scheduled") // scheduled, completed, cancelled
  notes             String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  organizer         User     @relation("MeetingOrganizer", fields: [organizerId], references: [id])
  student           StudentProfile @relation("StudentMeetings", fields: [studentId], references: [id])
}

model CommunicationLog {
  id                String   @id @default(cuid())
  userId            String
  action            String   // email_sent, meeting_scheduled, document_shared, etc.
  details           String?  @db.Text // JSON string with action-specific details
  createdAt         DateTime @default(now())
  
  user              User     @relation(fields: [userId], references: [id])
}

model CommunicationSettings {
  id                String   @id @default(cuid())
  userId            String   @unique
  emailNotifications Boolean  @default(true)
  smsNotifications   Boolean  @default(false)
  reminderTime       Int      @default(24) // Hours before meeting
  language           String   @default("en-GB")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TeacherProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  schoolId          String?
  subjects          String[] // Subjects taught
  gradeLevel        String?
  certifications    String[] // Certifications
  educationHistory  String?  @db.Text
  teachingPhilosophy String? @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  school            School?  @relation(fields: [schoolId], references: [id])
}

model ParentProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  childrenIds       String[] // Array of student user IDs
  relationship      String?  // e.g., "Mother", "Father", "Guardian"
  preferredContactMethod String? // e.g., "Email", "Phone", "Text"
  availabilityTimes String?  // e.g., "Evenings", "Weekends"
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model School {
  id              String   @id @default(cuid())
  name            String
  address         String?  @db.Text
  city            String?
  country         String?
  postalCode      String?
  phoneNumber     String?
  email           String?
  website         String?
  type            String?  // e.g., "Public", "Private", "Charter"
  gradeRange      String?  // e.g., "K-5", "6-8", "9-12"
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  students        StudentProfile[]
  teachers        TeacherProfile[]
}

// Learning Models
model LearningStyle {
  id                String   @id @default(cuid())
  userId            String   @unique
  visual            Int      @default(0) // 0-100 scale
  auditory          Int      @default(0) // 0-100 scale
  readWrite         Int      @default(0) // 0-100 scale
  kinesthetic       Int      @default(0) // 0-100 scale
  sequential        Int      @default(0) // 0-100 scale
  global            Int      @default(0) // 0-100 scale
  active            Int      @default(0) // 0-100 scale
  reflective        Int      @default(0) // 0-100 scale
  verbal            Int      @default(0) // 0-100 scale
  intuitive         Int      @default(0) // 0-100 scale
  sensing           Int      @default(0) // 0-100 scale
  additionalStyles  Json?    // For other learning style models
  assessmentResults Json?    // Raw assessment data
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProgressReport {
  id                String   @id @default(cuid())
  userId            String
  courseId          String?
  lessonId          String?
  title             String
  content           String   @db.Text
  strengths         String[] // Areas of strength
  areasForImprovement String[] // Areas needing improvement
  recommendations   String   @db.Text
  nextSteps         String   @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course            Course?  @relation(fields: [courseId], references: [id])
  lesson            Lesson?  @relation(fields: [lessonId], references: [id])
}

// Curriculum Models
model Course {
  id                String   @id @default(cuid())
  creatorId         String
  title             String
  description       String   @db.Text
  subject           String
  gradeLevel        String
  difficulty        String   @default("intermediate") // beginner, intermediate, advanced
  learningObjectives String[] // Array of learning objectives
  prerequisites     String[] // Array of prerequisites
  duration          Int?     // Estimated duration in minutes
  imageUrl          String?
  isPublished       Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  creator           User     @relation(fields: [creatorId], references: [id])
  lessons           Lesson[]
  enrollments       Enrollment[]
  progressReports   ProgressReport[]
  assessments       Assessment[]
  courseProgress    CourseProgress[]
  certificates      Certificate[]
}

model Lesson {
  id                String   @id @default(cuid())
  courseId          String
  creatorId         String
  title             String
  description       String   @db.Text
  content           String   @db.Text
  videoUrl          String?
  audioUrl          String?
  imageUrl          String?
  order             Int      @default(0)
  duration          Int?     // Estimated duration in minutes
  isPublished       Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  course            Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  creator           User     @relation(fields: [creatorId], references: [id])
  progressReports   ProgressReport[]
  resources         Resource[]
  activities        Activity[]
}

model Resource {
  id                String   @id @default(cuid())
  lessonId          String
  title             String
  description       String?  @db.Text
  type              String   // pdf, video, audio, link, etc.
  url               String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lesson            Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model Activity {
  id                String   @id @default(cuid())
  lessonId          String
  title             String
  description       String   @db.Text
  type              String   // quiz, assignment, discussion, etc.
  content           String   @db.Text
  duration          Int?     // Estimated duration in minutes
  points            Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lesson            Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model Enrollment {
  id                String   @id @default(cuid())
  userId            String
  courseId          String
  status            String   @default("active") // active, completed, dropped
  progress          Int      @default(0) // 0-100 percentage
  startDate         DateTime @default(now())
  completionDate    DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course            Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
}

model CourseProgress {
  id                String   @id @default(cuid())
  userId            String
  courseId          String
  moduleId          String   @default("")
  contentId         String   @default("")
  progress          Int      @default(0)
  completed         Boolean  @default(false)
  timeSpent         Int      @default(0)
  lastAccessed      DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course            Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId, moduleId, contentId])
}

// Assessment Models
model Assessment {
  id                String   @id @default(cuid())
  creatorId         String
  courseId          String?
  title             String
  description       String   @db.Text
  type              String   // quiz, test, assignment, project, etc.
  subject           String?
  keyStage          String?
  timeLimit         Int?     // Time limit in minutes
  passingScore      Int?     // Minimum score to pass
  isPublished       Boolean  @default(false)
  status            String   @default("draft") // draft, published, archived
  showResults       Boolean  @default(true)
  randomizeQuestions Boolean  @default(false)
  allowRetakes      Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  creator           User     @relation(fields: [creatorId], references: [id])
  course            Course?  @relation(fields: [courseId], references: [id])
  questions         Question[]
  responses         AssessmentResponse[]
}

model Question {
  id                String   @id @default(cuid())
  assessmentId      String
  type              String   // multiple_choice, true_false, short_answer, essay, etc.
  text              String   @db.Text
  options           Json?    // For multiple choice questions
  correctAnswer     String?  @db.Text
  points            Int      @default(1)
  difficulty        String   @default("medium") // easy, medium, hard
  explanation       String?  @db.Text
  order             Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  assessment        Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  responses         AssessmentResponse[]
}

model AssessmentResponse {
  id                String   @id @default(cuid())
  userId            String
  assessmentId      String
  questionId        String
  answer            String   @db.Text
  isCorrect         Boolean?
  pointsEarned      Int?
  feedback          String?  @db.Text
  createdAt         DateTime @default(now())
  
  user              User     @relation(fields: [userId], references: [id])
  assessment        Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  question          Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Certificate {
  id                String   @id @default(cuid())
  userId            String
  courseId          String
  title             String
  description       String?  @db.Text
  issueDate         DateTime @default(now())
  expiryDate        DateTime?
  certificateUrl    String?
  createdAt         DateTime @default(now())
  
  user              User     @relation(fields: [userId], references: [id])
  course            Course   @relation(fields: [courseId], references: [id])
}

// Restorative Practice Models
model RestorativeAgreement {
  id                String   @id @default(cuid())
  creatorId         String
  title             String
  description       String   @db.Text
  subject           String?
  keyStage          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  creator           User     @relation(fields: [creatorId], references: [id])
}

model Notification {
  id                String   @id @default(cuid())
  userId            String
  title             String
  message           String   @db.Text
  type              String   // info, warning, success, error
  read              Boolean  @default(false)
  link              String?  // Optional link to navigate to
  createdAt         DateTime @default(now())
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id                String   @id @default(cuid())
  content           String   @db.Text
  senderId          String
  recipientId       String
  read              Boolean  @default(false)
  createdAt         DateTime @default(now())
  
  recipient         User     @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  sender            User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
}

model PupilVoiceResponse {
  id                String   @id @default(cuid())
  userId            String
  surveyId          String
  responses         Json     // JSON object with question IDs and responses
  createdAt         DateTime @default(now())
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  survey            PupilVoiceSurvey @relation(fields: [surveyId], references: [id], onDelete: Cascade)
}

model PupilVoiceSurvey {
  id                String   @id @default(cuid())
  creatorId         String
  title             String
  description       String   @db.Text
  questions         Json     // JSON array of question objects
  targetAgeGroup    String?  // early_years, primary, secondary, etc.
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  creator           User     @relation(fields: [creatorId], references: [id])
  responses         PupilVoiceResponse[]
}

// Models for content transformation and curriculum
model ContentTransformation {
  id                String   @id @default(cuid())
  userId            String
  originalContent   String   @db.Text
  transformedContent String   @db.Text
  transformationType String   // simplify, expand, visualize, etc.
  metadata          Json?    // Additional transformation metadata
  createdAt         DateTime @default(now())
  
  user              User     @relation(fields: [userId], references: [id])
}

model CurriculumPlan {
  id                String   @id @default(cuid())
  creatorId         String
  title             String
  description       String   @db.Text
  subject           String
  keyStage          String
  objectives        String[] // Learning objectives
  duration          String?  // e.g., "1 term", "2 weeks"
  status            String   @default("draft") // draft, active, completed, archived
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  creator           User     @relation(fields: [creatorId], references: [id])
  collaborators     CurriculumPlanCollaborator[]
  comments          CurriculumPlanComment[]
  tasks             CurriculumPlanTask[]
}

model CurriculumPlanCollaborator {
  id                String   @id @default(cuid())
  planId            String
  userId            String
  role              String   @default("viewer") // viewer, editor, admin
  createdAt         DateTime @default(now())
  
  plan              CurriculumPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
}

model CurriculumPlanComment {
  id                String   @id @default(cuid())
  planId            String
  content           String   @db.Text
  createdAt         DateTime @default(now())
  
  plan              CurriculumPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
}

model CurriculumPlanTask {
  id                String   @id @default(cuid())
  planId            String
  title             String
  description       String   @db.Text
  status            String   @default("todo") // todo, in_progress, completed
  dueDate           DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  plan              CurriculumPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
}

model CurriculumDifferentiation {
  id                String   @id @default(cuid())
  title             String
  description       String   @db.Text
  targetGroup       String   // e.g., "SEN", "EAL", "Gifted"
  strategies        String[] // Array of differentiation strategies
  resources         String[] // Array of resource links
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Social-emotional learning models
model EmotionalCheckin {
  id                String   @id @default(cuid())
  mood              String   // e.g., "happy", "sad", "angry", "anxious"
  intensity         Int      // 1-10 scale
  notes             String?  @db.Text
  createdAt         DateTime @default(now())
}

model ExecutiveFunctionProfile {
  id                String   @id @default(cuid())
  workingMemory     Int      @default(0) // 0-100 scale
  inhibition        Int      @default(0) // 0-100 scale
  cognitiveFlexibility Int    @default(0) // 0-100 scale
  planning          Int      @default(0) // 0-100 scale
  organization      Int      @default(0) // 0-100 scale
  timeManagement    Int      @default(0) // 0-100 scale
  taskInitiation    Int      @default(0) // 0-100 scale
  emotionalControl  Int      @default(0) // 0-100 scale
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model ExecutiveFunctionTask {
  id                String   @id @default(cuid())
  title             String
  description       String   @db.Text
  targetSkill       String   // e.g., "working_memory", "inhibition", etc.
  difficulty        String   @default("medium") // easy, medium, hard
  duration          Int?     // Estimated duration in minutes
  instructions      String   @db.Text
  materials         String[] // Array of required materials
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Accessibility and multimodal content models
model MultiModalContent {
  id                String   @id @default(cuid())
  title             String
  textContent       String   @db.Text
  audioUrl          String?
  videoUrl          String?
  imageUrl          String?
  interactiveUrl    String?
  targetAudience    String?  // e.g., "visual_learners", "auditory_learners"
  accessibilityFeatures String[] // e.g., "screen_reader_compatible", "high_contrast"
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model ProgressPacing {
  id                String   @id @default(cuid())
  title             String
  description       String   @db.Text
  recommendedPace   String   // e.g., "standard", "accelerated", "supported"
  milestones        Json     // JSON array of milestone objects
  adaptiveRules     Json?    // JSON object with rules for adapting pace
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model AdaptiveContent {
  id                String   @id @default(cuid())
  title             String
  baseContent       String   @db.Text
  simplifiedVersion String?  @db.Text
  extendedVersion   String?  @db.Text
  visualVersion     String?  @db.Text
  adaptationRules   Json     // JSON object with rules for when to show each version
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model SpeechCalibration {
  id                String   @id @default(cuid())
  userId            String   @unique
  accentType        String?  // e.g., "British", "Scottish", "Welsh"
  speechRate        Int      @default(50) // 0-100 scale
  vocabularyLevel   String   @default("standard") // simple, standard, advanced
  customWords       String[] // Array of custom words for recognition
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model CircleTemplate {
  id                String   @id @default(cuid())
  creatorId         String
  title             String
  description       String   @db.Text
  openingQuestions  String[] // Array of opening questions
  mainQuestions     String[] // Array of main activity questions
  closingQuestions  String[] // Array of closing questions
  targetAgeGroup    String?  // e.g., "primary", "secondary"
  duration          Int?     // Estimated duration in minutes
  materials         String[] // Array of required materials
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  creator           User     @relation(fields: [creatorId], references: [id])
}

model ActivityFavorite {
  id                String   @id @default(cuid())
  userId            String
  activityType      String   // e.g., "circle_time", "mindfulness", "executive_function"
  activityId        String
  createdAt         DateTime @default(now())
  
  user              User     @relation(fields: [userId], references: [id])
}

model ParentEducationFavorite {
  id                String   @id @default(cuid())
  userId            String
  resourceType      String   // e.g., "article", "video", "workshop"
  resourceId        String
  createdAt         DateTime @default(now())
  
  user              User     @relation(fields: [userId], references: [id])
}

model ReflectionPrompt {
  id                String   @id @default(cuid())
  userId            String
  prompt            String   @db.Text
  category          String   // e.g., "behavior", "learning", "emotions"
  targetAgeGroup    String?  // e.g., "early_years", "primary", "secondary"
  createdAt         DateTime @default(now())
  
  user              User     @relation(fields: [userId], references: [id])
}

model RestorativeTrainingProgress {
  id                String   @id @default(cuid())
  userId            String   @unique
  modulesCompleted  String[] // Array of completed module IDs
  certificateEarned Boolean  @default(false)
  lastActivity      DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Learning Difference Profile model
model LearningDifferenceProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  dyslexia          Boolean  @default(false)
  dyspraxia         Boolean  @default(false)
  dyscalculia       Boolean  @default(false)
  adhd              Boolean  @default(false)
  asd               Boolean  @default(false)
  otherConditions   String?  @db.Text
  strengths         String[] // Array of strengths
  challenges        String[] // Array of challenges
  accommodations    String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Mindfulness models
model MindfulnessSettings {
  id                String   @id @default(cuid())
  userId            String   @unique
  reminderFrequency String   @default("daily") // daily, twice_daily, weekly, etc.
  reminderTime      String?  // Time of day for reminders
  preferredDuration Int      @default(5) // Duration in minutes
  preferredType     String   @default("breathing") // breathing, body_scan, visualization, etc.
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MindfulnessLog {
  id                String   @id @default(cuid())
  userId            String
  duration          Int      // Duration in minutes
  type              String   // breathing, body_scan, visualization, etc.
  notes             String?  @db.Text
  mood_before       Int?     // 1-10 scale
  mood_after        Int?     // 1-10 scale
  completed         Boolean  @default(true)
  createdAt         DateTime @default(now())
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Accessibility models
model AccessibilitySettings {
  id                String   @id @default(cuid())
  userId            String   @unique
  highContrastMode  Boolean  @default(false)
  contrastMode      String   @default("high-contrast") // high-contrast, yellow-black, etc.
  textSize          Int      @default(100) // Percentage of default text size
  contrastLevel     Int      @default(100) // Percentage of contrast level
  reduceAnimations  Boolean  @default(false)
  customTextColor   String   @default("#ffffff")
  customBackgroundColor String @default("#000000")
  customLinkColor   String   @default("#ffff00")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AccessibilityLog {
  id                String   @id @default(cuid())
  userId            String
  action            String   // setting_changed, feature_used, etc.
  feature           String   // high-contrast-mode, text-to-speech, etc.
  details           String?  @db.Text // JSON string with action-specific details
  createdAt         DateTime @default(now())
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
