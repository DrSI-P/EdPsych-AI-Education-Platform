// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  role              String    @default("user")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Learning style assessment
  learningStyleAssessments     LearningStyleAssessment[]
  learningStylePreferences     LearningStylePreference?

  // Content transformation
  contentTransformations       ContentTransformation[]
  contentTransformationSettings ContentTransformationSettings?

  // Speech recognition
  speechRecognitionSettings    SpeechRecognitionSettings?
  speechCalibrationProfiles    SpeechCalibrationProfile[]

  // Curriculum differentiation
  curriculumDifferentiationSettings CurriculumDifferentiationSettings?
  
  // Multi-modal content
  multiModalContentSettings    MultiModalContentSettings?
  
  // Adaptive complexity
  adaptiveComplexitySettings   AdaptiveComplexitySettings?
  
  // Progress pacing
  progressPacingSettings       ProgressPacingSettings?
  
  // Executive dysfunction
  executiveDysfunctionSettings ExecutiveDysfunctionSettings?
  tasks                        Task[]
  
  // Learning differences
  learningDifferenceSettings   LearningDifferenceSettings?
  learningDifferenceAssessments LearningDifferenceAssessment[]
  
  // Accessibility settings
  accessibilitySettings        AccessibilitySettings?
  accessibilityLogs            AccessibilityLog[]
  
  // Speech to text settings
  speechToTextSettings         SpeechToTextSettings?
  
  // Sensory regulation
  sensoryRegulationSettings    SensoryRegulationSettings?
  sensoryActivities            SensoryActivity[]
  sensoryDiets                 SensoryDiet[]
  
  // Behavior tracking and positive reinforcement
  behaviorTrackingSettings     BehaviorTrackingSettings?
  behaviorDefinitions          BehaviorDefinition[]
  behaviorGoals                BehaviorGoal[]
  behaviorRewards              BehaviorReward[]
  behaviorTrackings            BehaviorTracking[]
  behaviorTrackingLogs         BehaviorTrackingLog[]
  students                     Student[]
  rewardRedemptions            RewardRedemption[]
}

// NextAuth models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Learning Style Assessment models
model LearningStyleAssessment {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses   Json
  results     Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model LearningStylePreference {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  visualScore       Int
  auditoryScore     Int
  readWriteScore    Int
  kinestheticScore  Int
  primaryStyle      String
  secondaryStyle    String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Content Transformation models
model ContentTransformation {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  originalContent String @db.Text
  transformedContent String @db.Text
  learningStyle String
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ContentTransformationSettings {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  defaultLearningStyle String
  enhanceWithImages   Boolean  @default(true)
  enhanceWithAudio    Boolean  @default(true)
  enhanceWithInteractivity Boolean @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// Speech Recognition models
model SpeechRecognitionSettings {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sensitivity         Float    @default(0.5)
  noiseReduction      Boolean  @default(true)
  autoCorrect         Boolean  @default(true)
  punctuationPrediction Boolean @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model SpeechCalibrationProfile {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                String
  calibrationData     Json
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// Curriculum Differentiation models
model CurriculumDifferentiationSettings {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  defaultDifficultyLevel String @default("medium")
  enableAutomaticAdjustment Boolean @default(true)
  subjectPreferences  Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// Multi-modal Content models
model MultiModalContentSettings {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  preferredModalityMix Json
  enableAutoGeneration Boolean @default(true)
  contentQualityLevel String   @default("high")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// Adaptive Complexity models
model AdaptiveComplexitySettings {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  startingComplexityLevel Int   @default(5)
  adaptationRate      Float    @default(0.5)
  enableAutoAdjustment Boolean @default(true)
  subjectSettings     Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// Progress Pacing models
model ProgressPacingSettings {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  defaultPacingRate   String   @default("medium")
  enableAutoPacing    Boolean  @default(true)
  reminderFrequency   String   @default("daily")
  subjectPacing       Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// Executive Dysfunction Support models
model ExecutiveDysfunctionSettings {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  enableTaskBreakdown Boolean  @default(true)
  enableReminders     Boolean  @default(true)
  enableVisualSchedule Boolean @default(true)
  reminderFrequency   String   @default("hourly")
  reminderMethod      String   @default("notification")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Task {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title               String
  description         String?
  dueDate             DateTime?
  priority            String   @default("medium")
  status              String   @default("pending")
  steps               Json?
  reminderTime        DateTime?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// Learning Differences models
model LearningDifferenceSettings {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  dyslexiaSettings    Json?
  dyscalculiaSettings Json?
  adhdSettings        Json?
  autismSettings      Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model LearningDifferenceAssessment {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  assessmentType      String
  responses           Json
  results             Json
  recommendations     Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// Accessibility models
model AccessibilitySettings {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  highContrastMode    Boolean  @default(false)
  fontSize            Float    @default(1.0)
  enableTextToSpeech  Boolean  @default(false)
  enableScreenReader  Boolean  @default(false)
  reducedMotion       Boolean  @default(false)
  keyboardNavigation  Boolean  @default(false)
  additionalSettings  Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model AccessibilityLog {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  featureUsed         String
  duration            Int?
  context             String?
  createdAt           DateTime @default(now())
}

// Speech to Text models
model SpeechToTextSettings {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sensitivity         Float    @default(0.5)
  noiseReduction      Boolean  @default(true)
  punctuationPrediction Boolean @default(true)
  childVoiceOptimization Boolean @default(false)
  dialect             String   @default("en-GB")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

// Sensory Regulation models
model SensoryRegulationSettings {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  visualSensitivity   Int      @default(5)
  auditorySettings    Json?
  tactileSettings     Json?
  vestibularSettings  Json?
  proprioceptiveSettings Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model SensoryActivity {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                String
  description         String
  category            String   // calming, alerting, organizing
  sensorySystem       String   // visual, auditory, tactile, vestibular, proprioceptive
  duration            Int      // in minutes
  materials           String?
  instructions        String
  evidenceBase        String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relation to sensory diet
  sensoryDietItems    SensoryDietItem[]
}

model SensoryDiet {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                String
  description         String?
  targetProfile       String?
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relation to sensory diet items
  items               SensoryDietItem[]
}

model SensoryDietItem {
  id                  String   @id @default(cuid())
  sensoryDietId       String
  sensoryDiet         SensoryDiet @relation(fields: [sensoryDietId], references: [id], onDelete: Cascade)
  activityId          String
  activity            SensoryActivity @relation(fields: [activityId], references: [id])
  scheduledTime       String?  // e.g., "morning", "after lunch"
  frequency           String   // e.g., "daily", "as needed"
  duration            Int?     // in minutes, can override activity default
  notes               String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model SensoryRegulationLog {
  id                  String   @id @default(cuid())
  userId              String
  activityId          String?
  activityName        String
  category            String
  duration            Int
  effectiveness       Int?     // 1-10 rating
  notes               String?
  createdAt           DateTime @default(now())
}

// Behavior Tracking and Positive Reinforcement models
model BehaviorTrackingSettings {
  id                        String   @id @default(cuid())
  userId                    String   @unique
  user                      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  enablePositiveReinforcement Boolean  @default(true)
  enableBehaviorTracking    Boolean  @default(true)
  enableRewards             Boolean  @default(true)
  enableGoals               Boolean  @default(true)
  enableParentAccess        Boolean  @default(true)
  enableStudentAccess       Boolean  @default(true)
  notifyParentsOnAchievements Boolean @default(true)
  notifyParentsOnChallenges  Boolean @default(true)
  defaultTrackingFrequency  String   @default("daily")
  defaultRewardSystem       String   @default("points")
  defaultGoalFrequency      String   @default("weekly")
  customizableRewards       Boolean  @default(true)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}

model BehaviorDefinition {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                String
  description         String
  category            String   // positive, challenge, neutral
  trackingMethod      String   // frequency, duration, binary
  pointValue          Int      @default(1)
  notes               String?
  evidenceBase        String?  // Research or evidence supporting this behavior tracking approach
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  trackingData        BehaviorTracking[]
  goals               BehaviorGoal[]
}

model BehaviorGoal {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                String
  description         String?
  targetBehavior      String
  behavior            BehaviorDefinition @relation(fields: [targetBehavior], references: [id])
  targetValue         Int
  timeframe           String   // daily, weekly, monthly, term
  reward              String?  // Optional reward ID
  status              String   @default("active") // active, completed, paused
  completedAt         DateTime?
  studentId           String?  // Optional student ID
  student             Student? @relation(fields: [studentId], references: [id])
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  rewardRedemptions   RewardRedemption[]
}

model BehaviorReward {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                String
  description         String?
  pointCost           Int
  category            String   // privilege, activity, tangible, social, token
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  redemptions         RewardRedemption[]
}

model BehaviorTracking {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  behaviorId          String
  behavior            BehaviorDefinition @relation(fields: [behaviorId], references: [id])
  studentId           String?
  student             Student? @relation(fields: [studentId], references: [id])
  date                DateTime
  count               Int      @default(1)
  duration            Int?     // in minutes, for duration tracking
  notes               String?
  context             String?  // e.g., "During math lesson", "At lunch time"
  pointsEarned        Int      @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model BehaviorTrackingLog {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  action              String   // BEHAVIOR_TRACKED, GOAL_COMPLETED, REWARD_REDEEMED, etc.
  details             String   @db.Text // JSON string with details
  createdAt           DateTime @default(now())
}

model Student {
  id                  String   @id @default(cuid())
  userId              String   // Teacher/admin user who created this student
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                String
  year                String?  // School year/grade
  points              Int      @default(0)
  notes               String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  behaviorTrackings   BehaviorTracking[]
  goals               BehaviorGoal[]
  rewardRedemptions   RewardRedemption[]
}

model RewardRedemption {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  studentId           String?
  student             Student? @relation(fields: [studentId], references: [id])
  rewardId            String
  reward              BehaviorReward @relation(fields: [rewardId], references: [id])
  goalId              String?
  goal                BehaviorGoal? @relation(fields: [goalId], references: [id])
  pointsSpent         Int?
  status              String   @default("pending") // pending, approved, redeemed, denied
  notes               String?
  redeemedAt          DateTime?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}
