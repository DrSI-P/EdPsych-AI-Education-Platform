// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                @id @default(cuid())
  name                  String?
  email                 String?               @unique
  emailVerified         DateTime?
  image                 String?
  role                  String                @default("user")
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  accounts              Account[]
  sessions              Session[]
  transitionPlans       TransitionPlan[]
  iep504Plans           IEP504Plan[]
  teacherAlerts         TeacherAlert[]
  documentations        Documentation[]
  lessonPlans           LessonPlan[]
  accessibilitySettings AccessibilitySettings?
  accessibilityLogs     AccessibilityLog[]
  speechRecognitionLogs SpeechRecognitionLog[]
  createdAssessments    Assessment[]          @relation("CreatedBy")
  createdTemplates      AssessmentTemplate[]  @relation("CreatedBy")
  responses             Response[]
  pupilVoiceSurveys     PupilVoiceSurvey[]    @relation("PupilVoiceSurveyCreator")
  pupilVoiceResponses   PupilVoiceSurveyResponse[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Special Needs Support Models

model TransitionPlan {
  id                String   @id @default(cuid())
  title             String
  studentName       String
  transitionType    String
  currentSetting    String
  targetSetting     String
  startDate         DateTime
  endDate           DateTime
  strengths         String[]
  needs             String[]
  preferences       String[]
  goals             Json
  supportTeam       Json
  documents         Json?
  notes             String?
  status            String   @default("active")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  user              User     @relation(fields: [userId], references: [id])
}

model IEP504Plan {
  id                String   @id @default(cuid())
  title             String
  studentName       String
  dateOfBirth       DateTime
  schoolYear        String
  planType          String
  startDate         DateTime
  reviewDate        DateTime
  presentLevels     Json
  accommodations    Json
  goals             Json
  teamMembers       Json
  parentInput       String?
  studentInput      String?
  evaluationMethods String[]
  documents         Json?
  notes             String?
  status            String   @default("active")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  user              User     @relation(fields: [userId], references: [id])
}

model TeacherAlert {
  id                String   @id @default(cuid())
  studentName       String
  alertType         String
  description       String
  antecedent        String?
  behavior          String
  consequence       String?
  setting           String
  date              DateTime
  time              String?
  duration          String?
  intensity         Int?
  frequency         String?
  interventions     String[]
  effectiveStrategies String[]
  followUp          String?
  status            String   @default("active")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  user              User     @relation(fields: [userId], references: [id])
}

// Restorative Justice Models

model RestorativeConversation {
  id                String   @id @default(cuid())
  title             String
  participants      String[]
  date              DateTime
  framework         String
  questions         Json
  responses         Json
  agreements        Json?
  followUpDate      DateTime?
  status            String   @default("active")
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model CircleProcess {
  id                String   @id @default(cuid())
  title             String
  circleType        String
  participants      String[]
  date              DateTime
  openingCeremony   String?
  centerpiece       String?
  talkingPiece      String?
  questions         Json
  agreements        Json?
  closingCeremony   String?
  notes             String?
  status            String   @default("active")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model ReflectionPrompt {
  id                String   @id @default(cuid())
  title             String
  ageGroup          String
  category          String
  prompts           String[]
  guidanceNotes     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Agreement {
  id                String   @id @default(cuid())
  title             String
  participants      String[]
  date              DateTime
  agreements        Json
  checkInDates      DateTime[]
  checkInNotes      Json?
  status            String   @default("active")
  completionDate    DateTime?
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model CommunityActivity {
  id                String   @id @default(cuid())
  title             String
  activityType      String
  ageGroup          String
  timeRequired      String
  groupSize         String
  materials         String[]
  steps             Json
  variations        Json?
  objectives        String[]
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model StaffTrainingModule {
  id                String   @id @default(cuid())
  title             String
  level             String
  contentTypes      String[]
  duration          String
  objectives        String[]
  content           Json
  resources         Json?
  assessments       Json?
  completionCriteria Json
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model OutcomeMeasurement {
  id                String   @id @default(cuid())
  title             String
  measurementType   String
  targetGroup       String
  metrics           Json
  questions         Json?
  scoringGuide      Json?
  implementationNotes String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model ParentEducationResource {
  id                String   @id @default(cuid())
  title             String
  resourceType      String
  ageGroup          String
  difficultyLevel   String
  content           Json
  objectives        String[]
  implementationSteps Json?
  materials         String[]
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Teacher Administrative Automation Models

model Documentation {
  id                String   @id @default(cuid())
  title             String
  templateId        String
  content           Json
  metadata          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  user              User     @relation(fields: [userId], references: [id])
}

// Accessibility Models

model AccessibilitySettings {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  // High contrast settings
  highContrastMode        Boolean  @default(false)
  contrastMode            String   @default("high-contrast")
  textSize                Int      @default(100)
  contrastLevel           Int      @default(100)
  reduceAnimations        Boolean  @default(false)
  customTextColor         String   @default("#ffffff")
  customBackgroundColor   String   @default("#000000")
  customLinkColor         String   @default("#ffff00")
  
  // General accessibility settings
  lineSpacing             Int      @default(150)
  dyslexiaFont            Boolean  @default(false)
  
  // Keyboard navigation settings
  keyboardNavigation      Boolean  @default(false)
  highlightFocus          Boolean  @default(true)
  skipLinks               Boolean  @default(true)
  keyboardShortcuts       Boolean  @default(true)
  tabSize                 String   @default("normal")
  focusIndicatorSize      Int      @default(3)
  focusIndicatorColor     String   @default("blue")
  customFocusColor        String   @default("#0066cc")
  
  // Reduced motion settings
  reduceMotion            Boolean  @default(false)
  motionLevel             String   @default("moderate")
  allowEssentialAnimations Boolean  @default(true)
  allowHoverEffects       Boolean  @default(false)
  allowTransitions        Boolean  @default(true)
  transitionSpeed         Int      @default(50)
  allowAutoplay           Boolean  @default(false)
  
  // Screen reader optimization settings
  screenReaderOptimization Boolean  @default(false)
  enhancedAria            Boolean  @default(true)
  improvedAltText         Boolean  @default(true)
  semanticHeadings        Boolean  @default(true)
  tableAccessibility      Boolean  @default(true)
  formLabels              Boolean  @default(true)
  readingOrder            Boolean  @default(true)
  announcementLevel       String   @default("moderate")
  
  // Speech-to-text settings
  voiceRecognitionActive  Boolean  @default(false)
  textToSpeechActive      Boolean  @default(false)
  speechRate              Float    @default(1.0)
  speechPitch             Float    @default(1.0)
  
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AccessibilityLog {
  id        String   @id @default(cuid())
  userId    String
  feature   String
  options   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LessonPlan {
  id                String   @id @default(cuid())
  title             String
  subject           String
  yearGroup         String
  templateId        String
  duration          String?
  objectives        String?
  content           Json
  learningStyles    String[]
  specialNeeds      String[]
  metadata          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  user              User     @relation(fields: [userId], references: [id])
}

// Speech Recognition Models
model SpeechRecognitionLog {
  id                    String   @id @default(cuid())
  userId                String
  originalTranscript    String   @db.Text
  enhancedTranscript    String   @db.Text
  childVoiceOptimization Boolean  @default(true)
  language              String   @default("en-GB")
  confidenceScore       Float?
  duration              Float?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Assessment Models
model Assessment {
  id                 String     @id @default(cuid())
  title              String
  description        String?    @db.Text
  status             String     @default("draft") // draft, published, archived
  type               String     // quiz, survey, diagnostic, etc.
  subject            String?    // The subject area (e.g., Math, Science)
  keyStage           String?    // UK education key stage
  timeLimit          Int?       // Time limit in minutes
  passingScore       Float      @default(60.0)
  showResults        Boolean    @default(true)
  randomizeQuestions Boolean    @default(false)
  allowRetakes       Boolean    @default(false)
  createdById        String
  createdBy          User       @relation("CreatedBy", fields: [createdById], references: [id])
  questions          Question[]
  responses          Response[]
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
}

model Question {
  id                 String     @id @default(cuid())
  assessmentId       String
  assessment         Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  text               String     @db.Text
  content            String     @db.Text
  type               String     // multiple-choice, short-answer, etc.
  options            Json?      // For multiple-choice questions
  correctAnswer      Json?      // For questions with a correct answer
  expectedAnswer     String?    @db.Text // For open-ended questions
  points             Int        @default(1)
  order              Int        // For ordering questions within an assessment
  answers            Answer[]
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  templateQuestionId String?
  templateQuestion   AssessmentTemplateQuestion? @relation(fields: [templateQuestionId], references: [id])
}

model AssessmentTemplate {
  id          String                       @id @default(cuid())
  title       String
  description String?                      @db.Text
  type        String                       // quiz, survey, diagnostic, etc.
  category    String?                      // subject area or category
  createdById String
  createdBy   User                         @relation("CreatedBy", fields: [createdById], references: [id])
  questions   AssessmentTemplateQuestion[]
  isPublic    Boolean                      @default(false)
  createdAt   DateTime                     @default(now())
  updatedAt   DateTime                     @updatedAt
}

model AssessmentTemplateQuestion {
  id           String     @id @default(cuid())
  templateId   String
  template     AssessmentTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  text         String     @db.Text
  type         String     // multiple-choice, short-answer, etc.
  options      Json?      // For multiple-choice questions
  correctAnswer String?    // For questions with a correct answer
  order        Int        // For ordering questions within a template
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  questions    Question[]
}

// Pupil Voice Survey Models
model PupilVoiceSurvey {
  id          String                    @id @default(cuid())
  title       String
  description String                    @default("")
  status      String                    @default("draft") // draft, published, archived
  createdById String
  createdBy   User                      @relation("PupilVoiceSurveyCreator", fields: [createdById], references: [id])
  questions   PupilVoiceSurveyQuestion[]
  responses   PupilVoiceSurveyResponse[]
  templateId  String?
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt
}

model PupilVoiceSurveyQuestion {
  id       String           @id @default(cuid())
  text     String
  type     String           // text, multiple-choice, rating, etc.
  required Boolean          @default(false)
  options  Json?            // For multiple-choice questions
  order    Int              @default(0)
  surveyId String
  survey   PupilVoiceSurvey @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  answers  PupilVoiceSurveyAnswer[]
}

model PupilVoiceSurveyResponse {
  id        String                 @id @default(cuid())
  surveyId  String
  survey    PupilVoiceSurvey       @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  userId    String
  user      User                   @relation(fields: [userId], references: [id])
  answers   PupilVoiceSurveyAnswer[]
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
}

model PupilVoiceSurveyAnswer {
  id          String                 @id @default(cuid())
  responseId  String
  response    PupilVoiceSurveyResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  questionId  String
  question    PupilVoiceSurveyQuestion @relation(fields: [questionId], references: [id])
  content     Json
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
}

model Response {
  id          String   @id @default(cuid())
  assessmentId String
  assessment  Assessment @relation(fields: [assessmentId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  answers     Answer[]
  startedAt   DateTime
  completedAt DateTime?
  score       Float?
  feedback    String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Answer {
  id          String   @id @default(cuid())
  questionId  String
  question    Question @relation(fields: [questionId], references: [id])
  responseId  String
  response    Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  content     Json
  isCorrect   Boolean?
  feedback    String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
