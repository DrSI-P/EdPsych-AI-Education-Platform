'use client';

import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Progress } from "@/components/ui/progress";
import { Separator } from "@/components/ui/separator";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Slider } from "@/components/ui/slider";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Checkbox } from "@/components/ui/checkbox";
import ComprehensiveNavigation from '@/components/navigation/comprehensive-navigation';
import { 
  Brain, 
  BookOpen, 
  Lightbulb, 
  Star,
  Clock,
  ArrowRight,
  CheckCircle,
  FileText,
  Users,
  BarChart2,
  PieChart,
  LineChart,
  Download,
  Filter,
  Search,
  Calendar,
  User,
  Layers,
  Settings,
  Target,
  Award,
  Compass,
  Edit,
  Plus,
  Zap,
  Sparkles,
  Eye,
  Ear,
  Hand,
  MessageSquare,
  RefreshCw,
  BarChart,
  Activity,
  Palette,
  Music,
  BookOpen as Book,
  Briefcase
} from 'lucide-react';

export default function LearningStyleAssessmentPage() {
  const [activeTab, setActiveTab] = useState('overview');
  const [selectedStudent, setSelectedStudent] = useState<string | null>(null);
  const [assessmentInProgress, setAssessmentInProgress] = useState(false);
  const [assessmentCompleted, setAssessmentCompleted] = useState(false);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState<Record<number, number>>({});
  const [learningProfile, setLearningProfile] = useState<any>(null);

  // Sample data for demonstration
  const students = [
    { 
      id: 's1', 
      name: 'Emma Thompson', 
      year: 'Year 5',
      age: 10,
      avatar: 'üëßüèª',
      previousAssessments: 2
    },
    { 
      id: 's2', 
      name: 'James Wilson', 
      year: 'Year 7',
      age: 12,
      avatar: 'üë¶üèΩ',
      previousAssessments: 1
    },
    { 
      id: 's3', 
      name: 'Sophia Chen', 
      year: 'Year 3',
      age: 8,
      avatar: 'üëßüèª',
      previousAssessments: 0
    },
    { 
      id: 's4', 
      name: 'Mohammed Ali', 
      year: 'Year 9',
      age: 14,
      avatar: 'üë¶üèæ',
      previousAssessments: 3
    },
    { 
      id: 's5', 
      name: 'Olivia Parker', 
      year: 'Year 6',
      age: 11,
      avatar: 'üëßüèº',
      previousAssessments: 1
    }
  ];

  const learningStyles = [
    { 
      id: 'visual', 
      name: 'Visual', 
      icon: Eye,
      description: 'Learns best through seeing and visualizing information',
      characteristics: ['Prefers diagrams and charts', 'Easily remembers visual details', 'Benefits from colour-coding', 'Enjoys visual arts'],
      strategies: ['Use mind maps and diagrams', 'Highlight key points in different colors', 'Watch educational videos', 'Create visual summaries'],
      color: 'blue'
    },
    { 
      id: 'auditory', 
      name: 'Auditory', 
      icon: Ear,
      description: 'Learns best through listening and verbal communication',
      characteristics: ['Remembers spoken information well', 'Enjoys discussions and debates', 'May talk to self when problem-solving', 'Sensitive to tone and rhythm'],
      strategies: ['Record and listen to lessons', 'Participate in group discussions', 'Read aloud when studying', 'Use verbal mnemonics'],
      color: 'green'
    },
    { 
      id: 'kinesthetic', 
      name: 'Kinesthetic', 
      icon: Hand,
      description: 'Learns best through physical activities and hands-on experiences',
      characteristics: ['Prefers learning by doing', 'Enjoys physical activities', 'May fidget when sitting still', 'Good at physical skills and sports'],
      strategies: ['Use manipulatives and models', 'Take frequent movement breaks', 'Incorporate role-play', 'Create physical demonstrations'],
      color: 'amber'
    },
    { 
      id: 'reading', 
      name: 'Reading/Writing', 
      icon: BookOpen,
      description: 'Learns best through reading and writing text-based information',
      characteristics: ['Enjoys reading and writing', 'Takes detailed notes', 'Prefers text-based information', 'Expresses ideas well in writing'],
      strategies: ['Create written summaries', 'Use lists and bullet points', 'Keep a learning journal', 'Rewrite information in own words'],
      color: 'purple'
    },
    { 
      id: 'logical', 
      name: 'Logical', 
      icon: Brain,
      description: 'Learns best through logical reasoning and systematic thinking',
      characteristics: ['Enjoys problem-solving', 'Looks for patterns and connections', 'Prefers structured learning', 'Strong analytical skills'],
      strategies: ['Use categorization and classification', 'Create step-by-step procedures', 'Analyse case studies', 'Apply logical frameworks'],
      color: 'red'
    },
    { 
      id: 'social', 
      name: 'Social', 
      icon: Users,
      description: 'Learns best through interaction and collaboration with others',
      characteristics: ['Enjoys group work', 'Learns from others\' perspectives', 'Good communication skills', 'Prefers collaborative learning'],
      strategies: ['Participate in study groups', 'Teach concepts to others', 'Engage in peer feedback', 'Use collaborative projects'],
      color: 'indigo'
    },
    { 
      id: 'solitary', 
      name: 'Solitary', 
      icon: User,
      description: 'Learns best through independent study and self-reflection',
      characteristics: ['Prefers working alone', 'Self-motivated', 'Reflective thinker', 'Good at self-directed learning'],
      strategies: ['Create personal study space', 'Set individual goals', 'Keep a reflective journal', 'Use self-paced learning resources'],
      color: 'slate'
    }
  ];

  const assessmentQuestions = [
    {
      id: 1,
      text: "When learning something new, I prefer to:",
      options: [
        "See diagrams, charts, or demonstrations",
        "Listen to explanations and discuss ideas",
        "Try it out hands-on and learn by doing",
        "Read about it and take notes"
      ]
    },
    {
      id: 2,
      text: "When trying to remember information, I most easily recall:",
      options: [
        "Images, diagrams, and what things looked like",
        "What was said and the sounds I heard",
        "The actions and movements I performed",
        "The notes I wrote or text I read"
      ]
    },
    {
      id: 3,
      text: "When solving a problem, I tend to:",
      options: [
        "Visualize the solution or draw it out",
        "Talk through the problem out loud",
        "Use physical objects or move around",
        "Write down the steps or create a list"
      ]
    },
    {
      id: 4,
      text: "I learn best when:",
      options: [
        "I can see visual representations of the material",
        "I can listen and discuss the topic",
        "I can physically engage with the material",
        "I can read about it and write my thoughts"
      ]
    },
    {
      id: 5,
      text: "When giving directions, I usually:",
      options: [
        "Draw a map or show pictures",
        "Explain verbally with detailed instructions",
        "Walk with the person or physically point the way",
        "Write down step-by-step directions"
      ]
    },
    {
      id: 6,
      text: "During free time, I most enjoy:",
      options: [
        "Visual activities like drawing, watching videos, or looking at pictures",
        "Listening to music, podcasts, or having conversations",
        "Physical activities, sports, or making things with my hands",
        "Reading books or writing stories"
      ]
    },
    {
      id: 7,
      text: "When learning from a teacher, I prefer when they:",
      options: [
        "Use visual aids, diagrams, and demonstrations",
        "Explain things clearly and allow for discussion",
        "Provide hands-on activities and experiments",
        "Provide written materials and note-taking opportunities"
      ]
    },
    {
      id: 8,
      text: "I find it easiest to concentrate when:",
      options: [
        "The environment is visually organised and free from visual distractions",
        "It's quiet or there's consistent background sound",
        "I can move around or fidget whilst learning",
        "I have a comfortable space to read and write"
      ]
    },
    {
      id: 9,
      text: "When explaining something to someone else, I tend to:",
      options: [
        "Show them pictures or draw diagrams",
        "Explain verbally with detailed descriptions",
        "Demonstrate physically how to do it",
        "Write out instructions or explanations"
      ]
    },
    {
      id: 10,
      text: "I remember best when I:",
      options: [
        "Create mental images or use colour-coding",
        "Repeat information out loud or discuss it",
        "Act out concepts or use physical movement",
        "Write information down multiple times"
      ]
    },
    {
      id: 11,
      text: "When working on a group project, I prefer to:",
      options: [
        "Create the visual elements and organise how it looks",
        "Discuss ideas and present information verbally",
        "Build models or handle the physical aspects",
        "Research information and write the content"
      ]
    },
    {
      id: 12,
      text: "When recalling a past event, I most vividly remember:",
      options: [
        "What I saw and how things looked",
        "What people said and the sounds I heard",
        "What I did and how it felt physically",
        "Notes I took or text I read about it"
      ]
    }
  ];

  const recentAssessments = [
    {
      id: 'a1',
      studentName: 'Emma Thompson',
      date: 'June 5, 2025',
      primaryStyle: 'Visual',
      secondaryStyle: 'Reading/Writing',
      status: 'Completed'
    },
    {
      id: 'a2',
      studentName: 'James Wilson',
      date: 'June 3, 2025',
      primaryStyle: 'Kinesthetic',
      secondaryStyle: 'Auditory',
      status: 'Completed'
    },
    {
      id: 'a3',
      studentName: 'Mohammed Ali',
      date: 'May 28, 2025',
      primaryStyle: 'Logical',
      secondaryStyle: 'Solitary',
      status: 'Completed'
    }
  ];

  const handleStudentSelect = (id: string) => {
    setSelectedStudent(id);
  };

  const handleStartAssessment = () => {
    setAssessmentInProgress(true);
    setCurrentQuestion(0);
    setAnswers({});
  };

  const handleAnswerSelect = (questionIndex: number, answerIndex: number) => {
    setAnswers({
      ...answers,
      [questionIndex]: answerIndex
    });

    if (questionIndex < assessmentQuestions.length - 1) {
      setCurrentQuestion(questionIndex + 1);
    } else {
      // Last question answered, generate results
      setTimeout(() => {
        generateLearningProfile();
        setAssessmentInProgress(false);
        setAssessmentCompleted(true);
      }, 1500);
    }
  };

  const generateLearningProfile = () => {
    // Count the frequency of each answer type
    const counts = [0, 0, 0, 0]; // Visual, Auditory, Kinesthetic, Reading/Writing
    
    Object.values(answers).forEach(answerIndex => {
      counts[answerIndex]++;
    });
    
    // Determine primary and secondary styles
    const primaryIndex = counts.indexOf(Math.max(...counts));
    
    // Create a copy of counts and set the primary to -1 to find the second highest
    const countsCopy = [...counts];
    countsCopy[primaryIndex] = -1;
    const secondaryIndex = countsCopy.indexOf(Math.max(...countsCopy));
    
    // Map indices to learning styles
    const styleMap = ['visual', 'auditory', 'kinesthetic', 'reading'];
    const primaryStyle = styleMap[primaryIndex];
    const secondaryStyle = styleMap[secondaryIndex];
    
    // Calculate percentages
    const total = counts.reduce((sum, count) => sum + count, 0);
    const percentages = counts.map(count => Math.round((count / total) * 100));
    
    // Generate profile
    setLearningProfile({
      primaryStyle,
      secondaryStyle,
      percentages: {
        visual: percentages[0],
        auditory: percentages[1],
        kinesthetic: percentages[2],
        reading: percentages[3],
        logical: Math.round(Math.random() * 30) + 20, // Random values for demonstration
        social: Math.round(Math.random() * 30) + 20,
        solitary: Math.round(Math.random() * 30) + 20
      },
      strengths: [
        learningStyles.find(style => style.id === primaryStyle)?.characteristics[0],
        learningStyles.find(style => style.id === primaryStyle)?.characteristics[1],
        learningStyles.find(style => style.id === secondaryStyle)?.characteristics[0]
      ],
      recommendations: [
        learningStyles.find(style => style.id === primaryStyle)?.strategies[0],
        learningStyles.find(style => style.id === primaryStyle)?.strategies[1],
        learningStyles.find(style => style.id === secondaryStyle)?.strategies[0],
        learningStyles.find(style => style.id === 'logical')?.strategies[0]
      ]
    });
  };

  const resetAssessment = () => {
    setAssessmentCompleted(false);
    setSelectedStudent(null);
    setAnswers({});
    setLearningProfile(null);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-amber-50">
      <ComprehensiveNavigation />
      
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        {/* Header */}
        <div className="text-centre mb-12">
          <Badge className="bg-gradient-to-r from-indigo-600 to-amber-600 text-white px-4 py-2 mb-4">
            <Brain className="w-4 h-4 mr-2" />
            Learning Style Assessment
          </Badge>
          <h1 className="text-4xl font-bold text-grey-900 mb-4">
            Personalized Learning Style Profiling
          </h1>
          <p className="text-xl text-grey-600 max-w-3xl mx-auto">
            Identify and leverage individual learning preferences to enhance educational outcomes through evidence-based assessment and personalized strategies.
          </p>
        </div>

        {/* Main Tabs */}
        <Tabs defaultValue="overview" value={activeTab} onValueChange={setActiveTab} className="mb-8">
          <TabsList className="grid grid-cols-4 mb-8">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="assessment">Take Assessment</TabsTrigger>
            <TabsTrigger value="history">Assessment History</TabsTrigger>
            <TabsTrigger value="resources">Learning Resources</TabsTrigger>
          </TabsList>
          
          {/* Overview Tab */}
          <TabsContent value="overview">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg flex items-centre">
                    <Zap className="w-5 h-5 mr-2 text-indigo-500" />
                    Assessments Completed
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-3xl font-bold">87</div>
                  <p className="text-sm text-grey-500">Last 30 days</p>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg flex items-centre">
                    <Users className="w-5 h-5 mr-2 text-amber-500" />
                    Students Profiled
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-3xl font-bold">42</div>
                  <p className="text-sm text-grey-500">Unique students</p>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg flex items-centre">
                    <Target className="w-5 h-5 mr-2 text-green-500" />
                    Strategy Implementation
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-3xl font-bold">76%</div>
                  <p className="text-sm text-grey-500">Adoption rate</p>
                </CardContent>
              </Card>
            </div>
            
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
              <Card>
                <CardHeader>
                  <CardTitle>Learning Styles Overview</CardTitle>
                  <CardDescription>Understanding different learning preferences</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {learningStyles.slice(0, 4).map((style) => (
                      <div key={style.id} className="flex items-start">
                        <div className={`w-10 h-10 rounded-full bg-${style.color}-100 flex items-centre justify-centre mr-3 mt-1`}>
                          <style.icon className={`w-5 h-5 text-${style.color}-600`} />
                        </div>
                        <div>
                          <h3 className="font-medium mb-1">{style.name} Learners</h3>
                          <p className="text-sm text-grey-600">
                            {style.description}
                          </p>
                        </div>
                      </div>
                    ))}
                    
                    <Button variant="outline" className="w-full mt-2" onClick={() => setActiveTab('resources')}>
                      View All Learning Styles
                    </Button>
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader>
                  <CardTitle>Assessment Process</CardTitle>
                  <CardDescription>How our learning style assessment works</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-6">
                    <div className="flex items-start">
                      <div className="w-8 h-8 rounded-full bg-indigo-100 flex items-centre justify-centre mr-3 mt-1">
                        <span className="font-bold text-indigo-600">1</span>
                      </div>
                      <div>
                        <h3 className="font-medium mb-1">Select Student</h3>
                        <p className="text-sm text-grey-600">
                          Choose the student to assess from your class or create a new student profile.
                        </p>
                      </div>
                    </div>
                    
                    <div className="flex items-start">
                      <div className="w-8 h-8 rounded-full bg-indigo-100 flex items-centre justify-centre mr-3 mt-1">
                        <span className="font-bold text-indigo-600">2</span>
                      </div>
                      <div>
                        <h3 className="font-medium mb-1">Complete Assessment</h3>
                        <p className="text-sm text-grey-600">
                          Guide the student through a series of questions designed to identify learning preferences.
                        </p>
                      </div>
                    </div>
                    
                    <div className="flex items-start">
                      <div className="w-8 h-8 rounded-full bg-indigo-100 flex items-centre justify-centre mr-3 mt-1">
                        <span className="font-bold text-indigo-600">3</span>
                      </div>
                      <div>
                        <h3 className="font-medium mb-1">Review Results</h3>
                        <p className="text-sm text-grey-600">
                          Analyse the comprehensive learning style profile with detailed insights and visualizations.
                        </p>
                      </div>
                    </div>
                    
                    <div className="flex items-start">
                      <div className="w-8 h-8 rounded-full bg-indigo-100 flex items-centre justify-centre mr-3 mt-1">
                        <span className="font-bold text-indigo-600">4</span>
                      </div>
                      <div>
                        <h3 className="font-medium mb-1">Implement Strategies</h3>
                        <p className="text-sm text-grey-600">
                          Apply recommended teaching and learning strategies based on the identified learning styles.
                        </p>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
            
            <Card className="bg-gradient-to-r from-indigo-50 to-amber-50 border-indigo-200">
              <CardContent className="p-6">
                <div className="flex flex-col md:flex-row items-centre md:space-x-8">
                  <div className="mb-6 md:mb-0">
                    <div className="w-20 h-20 bg-gradient-to-r from-indigo-600 to-amber-600 rounded-full flex items-centre justify-centre mx-auto">
                      <Brain className="w-10 h-10 text-white" />
                    </div>
                  </div>
                  <div className="flex-1 text-centre md:text-left">
                    <h3 className="text-xl font-bold text-grey-900 mb-2">Ready to Assess Learning Styles?</h3>
                    <p className="text-grey-600 mb-4">
                      Identify individual learning preferences and get personalized strategies to enhance educational outcomes.
                    </p>
                    <div className="flex flex-col sm:flex-row gap-3 justify-centre md:justify-start">
                      <Button onClick={() => setActiveTab('assessment')} className="bg-gradient-to-r from-indigo-600 to-amber-600">
                        Start Assessment
                      </Button>
                      <Button variant="outline">
                        View Tutorial
                      </Button>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
          
          {/* Assessment Tab */}
          <TabsContent value="assessment">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
              <div className="lg:col-span-1">
                {!assessmentInProgress && !assessmentCompleted && (
                  <>
                    <div className="mb-6">
                      <h2 className="text-2xl font-bold mb-2">Select Student</h2>
                      <p className="text-grey-600">
                        Choose the student to assess or create a new student profile
                      </p>
                    </div>
                    
                    <div className="space-y-4">
                      {students.map((student) => (
                        <Card 
                          key={student.id} 
                          className={`cursor-pointer transition-all ${
                            selectedStudent === student.id ? 'ring-2 ring-indigo-500' : ''
                          }`}
                          onClick={() => handleStudentSelect(student.id)}
                        >
                          <CardContent className="p-4">
                            <div className="flex items-centre">
                              <div className="w-10 h-10 rounded-full bg-indigo-100 flex items-centre justify-centre mr-3 text-xl">
                                {student.avatar}
                              </div>
                              <div className="flex-1">
                                <h3 className="font-medium">{student.name}</h3>
                                <div className="flex items-centre text-sm text-grey-500">
                                  <span>{student.year}</span>
                                  <span className="mx-2">‚Ä¢</span>
                                  <span>Age {student.age}</span>
                                </div>
                              </div>
                              <div className="text-right">
                                <Badge variant="outline" className="bg-grey-50">
                                  {student.previousAssessments} previous
                                </Badge>
                              </div>
                            </div>
                          </CardContent>
                        </Card>
                      ))}
                      
                      <Card className="border-dashed border-2 border-grey-300 bg-grey-50">
                        <CardContent className="p-4 flex items-centre justify-centre cursor-pointer">
                          <div className="text-centre py-4">
                            <Plus className="w-8 h-8 text-grey-400 mx-auto mb-2" />
                            <h3 className="font-medium text-grey-600">Add New Student</h3>
                          </div>
                        </CardContent>
                      </Card>
                    </div>
                  </>
                )}
                
                {assessmentInProgress && (
                  <Card>
                    <CardHeader>
                      <CardTitle>Assessment Progress</CardTitle>
                      <CardDescription>
                        Question {currentQuestion + 1} of {assessmentQuestions.length}
                      </CardDescription>
                    </CardHeader>
                    <CardContent>
                      <Progress value={((currentQuestion + 1) / assessmentQuestions.length) * 100} className="mb-4" />
                      
                      <div className="space-y-2">
                        <h3 className="font-medium">Current Section:</h3>
                        <Badge className="bg-indigo-100 text-indigo-800 hover:bg-indigo-200">
                          Learning Preferences
                        </Badge>
                        
                        <h3 className="font-medium mt-4">Student:</h3>
                        <div className="flex items-centre">
                          <div className="w-8 h-8 rounded-full bg-indigo-100 flex items-centre justify-centre mr-2 text-lg">
                            {students.find(s => s.id === selectedStudent)?.avatar}
                          </div>
                          <span>{students.find(s => s.id === selectedStudent)?.name}</span>
                        </div>
                        
                        <h3 className="font-medium mt-4">Tips:</h3>
                        <ul className="text-sm text-grey-600 space-y-1 list-disc list-inside">
                          <li>Ensure the student understands each question</li>
                          <li>Choose the option that best represents their preference</li>
                          <li>Consider recent examples of their learning behaviour</li>
                          <li>There are no right or wrong answers</li>
                        </ul>
                      </div>
                    </CardContent>
                  </Card>
                )}
                
                {assessmentCompleted && learningProfile && (
                  <Card>
                    <CardHeader>
                      <CardTitle>Assessment Summary</CardTitle>
                      <CardDescription>
                        Learning style profile for {students.find(s => s.id === selectedStudent)?.name}
                      </CardDescription>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-4">
                        <div>
                          <h3 className="font-medium mb-2">Primary Learning Style:</h3>
                          <Badge className="bg-indigo-100 text-indigo-800 text-sm px-3 py-1">
                            {learningStyles.find(style => style.id === learningProfile.primaryStyle)?.name}
                          </Badge>
                        </div>
                        
                        <div>
                          <h3 className="font-medium mb-2">Secondary Learning Style:</h3>
                          <Badge className="bg-amber-100 text-amber-800 text-sm px-3 py-1">
                            {learningStyles.find(style => style.id === learningProfile.secondaryStyle)?.name}
                          </Badge>
                        </div>
                        
                        <div>
                          <h3 className="font-medium mb-2">Date Completed:</h3>
                          <p className="text-sm text-grey-600">
                            {new Date().toLocaleDateString('en-GB', { 
                              day: 'numeric', 
                              month: 'long', 
                              year: 'numeric' 
                            })}
                          </p>
                        </div>
                        
                        <Button variant="outline" className="w-full" onClick={() => setActiveTab('resources')}>
                          View Learning Resources
                        </Button>
                        
                        <Button variant="outline" className="w-full" onClick={resetAssessment}>
                          Start New Assessment
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                )}
              </div>
              
              <div className="lg:col-span-2">
                {!assessmentInProgress && !assessmentCompleted && (
                  <Card>
                    <CardHeader>
                      <CardTitle>Learning Style Assessment</CardTitle>
                      <CardDescription>