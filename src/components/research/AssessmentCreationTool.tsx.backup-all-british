'use client';

import React, { useState, useEffect } from 'react';
import { 
  ClipboardList, 
  Plus, 
  Trash2, 
  Edit, 
  CheckSquare,
  AlignLeft,
  FileText,
  Save,
  Eye,
  Search
} from 'lucide-react';

interface AssessmentCreationToolProps {
  userId?: string;
  userRole: 'student' | 'instructor' | 'researcher' | 'admin';
  className?: string;
}

type QuestionType = 'multiple-choice' | 'short-answer' | 'essay' | 'true-false';

interface Assessment {
  id: string;
  title: string;
  description: string;
  instructions: string;
  timeLimit?: number; // in minutes
  passingScore?: number; // percentage
  questions: Question[];
  tags: string[];
  createdAt: number;
  updatedAt: number;
  status: 'draft' | 'published' | 'archived';
  author: string;
}

interface Question {
  id: string;
  type: QuestionType;
  text: string;
  points: number;
  required: boolean;
  options?: Option[];
  correctAnswer?: string | string[];
  rubric?: RubricCriteria[];
}

interface Option {
  id: string;
  text: string;
  isCorrect?: boolean;
}

interface RubricCriteria {
  id: string;
  criterion: string;
  description: string;
  pointValues: {
    value: number;
    description: string;
  }[];
}

const AssessmentCreationTool: React.FC<AssessmentCreationToolProps> = ({
  userId,
  userRole,
  className = '',
}) => {
  // State
  const [assessments, setAssessments] = useState<Assessment[]>([]);
  const [selectedAssessment, setSelectedAssessment] = useState<Assessment | null>(null);
  const [isEditing, setIsEditing] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [previewMode, setPreviewMode] = useState(false);
  
  // Fetch data
  useEffect(() => {
    const fetchData = async () => {
      try {
        setIsLoading(true);
        
        // Mock assessments
        const mockAssessments: Assessment[] = [
          {
            id: 'assessment-1',
            title: 'Educational Psychology Midterm',
            description: 'Comprehensive assessment of educational psychology concepts covered in the first half of the semester.',
            instructions: 'Answer all questions. Multiple choice questions are worth 2 points each, short answer questions are worth 5 points each.',
            timeLimit: 60,
            passingScore: 70,
            questions: [
              {
                id: 'q1',
                type: 'multiple-choice',
                text: 'Which theory emphasizes the role of observational learning?',
                points: 2,
                required: true,
                options: [
                  { id: 'o1', text: 'Behaviorism', isCorrect: false },
                  { id: 'o2', text: 'Social Cognitive Theory', isCorrect: true },
                  { id: 'o3', text: 'Constructivism', isCorrect: false },
                  { id: 'o4', text: 'Information Processing Theory', isCorrect: false }
                ],
                correctAnswer: 'o2'
              },
              {
                id: 'q2',
                type: 'short-answer',
                text: 'Explain the concept of scaffolding and provide an example of how it might be used in a classroom setting.',
                points: 5,
                required: true,
                rubric: [
                  {
                    id: 'r1',
                    criterion: 'Definition',
                    description: 'Accuracy and completeness of scaffolding definition',
                    pointValues: [
                      { value: 0, description: 'No definition or completely incorrect' },
                      { value: 1, description: 'Partial or somewhat accurate definition' },
                      { value: 2, description: 'Complete and accurate definition' }
                    ]
                  },
                  {
                    id: 'r2',
                    criterion: 'Example',
                    description: 'Relevance and clarity of classroom example',
                    pointValues: [
                      { value: 0, description: 'No example or irrelevant example' },
                      { value: 1, description: 'Somewhat relevant but unclear example' },
                      { value: 2, description: 'Clear and highly relevant example' },
                      { value: 3, description: 'Exceptional example showing deep understanding' }
                    ]
                  }
                ]
              }
            ],
            tags: ['educational psychology', 'midterm', 'theories'],
            createdAt: Date.now() - 30 * 24 * 60 * 60 * 1000, // 30 days ago
            updatedAt: Date.now() - 2 * 24 * 60 * 60 * 1000, // 2 days ago
            status: 'published',
            author: 'Dr. Emily Chen'
          },
          {
            id: 'assessment-2',
            title: 'Learning Styles Questionnaire',
            description: 'Assessment to help identify preferred learning styles and strategies.',
            instructions: 'Select the option that best describes your preferences. There are no right or wrong answers.',
            questions: [
              {
                id: 'q1',
                type: 'multiple-choice',
                text: 'When learning a new skill, I prefer to:',
                points: 1,
                required: true,
                options: [
                  { id: 'o1', text: 'Read about it first' },
                  { id: 'o2', text: 'Watch someone demonstrate it' },
                  { id: 'o3', text: 'Try it myself through trial and error' },
                  { id: 'o4', text: 'Discuss it with others' }
                ]
              }
            ],
            tags: ['learning styles', 'self-assessment', 'questionnaire'],
            createdAt: Date.now() - 15 * 24 * 60 * 60 * 1000, // 15 days ago
            updatedAt: Date.now() - 15 * 24 * 60 * 60 * 1000, // 15 days ago
            status: 'draft',
            author: 'Dr. Emily Chen'
          }
        ];
        
        setAssessments(mockAssessments);
        setSelectedAssessment(mockAssessments[0]);
        setError(null);
      } catch (err) {
        console.error('Error fetching assessment data:', err);
        setError('Failed to load assessments');
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchData();
  }, [userId, userRole]);
  
  // Format date
  const formatDate = (timestamp: number): string => {
    return new Date(timestamp).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };
  
  // Get question type icon
  const getQuestionTypeIcon = (type: QuestionType) => {
    switch (type) {
      case 'multiple-choice':
        return <CheckSquare className="h-4 w-4 text-blue-400" />;
      case 'short-answer':
        return <AlignLeft className="h-4 w-4 text-green-400" />;
      case 'essay':
        return <FileText className="h-4 w-4 text-purple-400" />;
      case 'true-false':
        return <CheckSquare className="h-4 w-4 text-yellow-400" />;
      default:
        return <FileText className="h-4 w-4 text-gray-400" />;
    }
  };
  
  // Get status color
  const getStatusColor = (status: string): string => {
    switch (status) {
      case 'draft':
        return 'bg-yellow-500';
      case 'published':
        return 'bg-green-500';
      case 'archived':
        return 'bg-grey-500';
      default:
        return 'bg-grey-500';
    }
  };
  
  // Filter assessments
  const filteredAssessments = assessments.filter(assessment => {
    return assessment.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
           assessment.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
           assessment.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));
  });
  
  // Create new assessment
  const createNewAssessment = (): void => {
    const newAssessment: Assessment = {
      id: `assessment-${Date.now()}`,
      title: 'New Assessment',
      description: 'Assessment description',
      instructions: 'Instructions for taking this assessment',
      questions: [],
      tags: [],
      createdAt: Date.now(),
      updatedAt: Date.now(),
      status: 'draft',
      author: 'Current User' // In a real app, this would be the current user's name
    };
    
    setAssessments([...assessments, newAssessment]);
    setSelectedAssessment(newAssessment);
    setIsEditing(true);
  };
  
  // Add new question
  const addNewQuestion = (type: QuestionType) => {
    if (!selectedAssessment) return;
    
    const newQuestion: Question = {
      id: `q-${Date.now()}`,
      type,
      text: 'New question',
      points: 1,
      required: true,
      options: type === 'multiple-choice' || type === 'true-false' ? [
        { id: `o-${Date.now()}-1`, text: 'Option 1' },
        { id: `o-${Date.now()}-2`, text: 'Option 2' }
      ] : undefined
    };
    
    const updatedAssessment = {
      ...selectedAssessment,
      questions: [...selectedAssessment.questions, newQuestion],
      updatedAt: Date.now()
    };
    
    setSelectedAssessment(updatedAssessment);
    setAssessments(assessments.map(a => a.id === updatedAssessment.id ? updatedAssessment : a));
  };
  
  // Render loading state
  if (isLoading) {
    return (
      <div className={`bg-gray-900 rounded-lg p-6 ${className}`}>
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-2xl font-semibold text-white">Assessment Creation Tool</h2>
          <div className="animate-pulse h-4 w-32 bg-gray-700 rounded"></div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="animate-pulse h-64 bg-gray-800 rounded"></div>
          <div className="animate-pulse h-64 bg-gray-800 rounded md:col-span-2"></div>
        </div>
      </div>
    );
  }
  
  return (
    <div className={`bg-gray-900 rounded-lg p-6 ${className}`}>
      {/* Header */}
      <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-6">
        <h2 className="text-2xl font-semibold text-white mb-4 md:mb-0 flex items-center">
          <ClipboardList className="h-6 w-6 mr-2 text-blue-400" />
          Assessment Creation Tool
        </h2>
        
        <div className="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-4">
          {/* Search */}
          <div className="relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <Search className="h-4 w-4 text-gray-400" />
            </div>
            <input
              type="text"
              className="bg-gray-800 text-white rounded pl-10 pr-4 py-2 text-sm w-full"
              placeholder="Search assessments..."
              value={searchQuery}
              onChange={(e: any) => setSearchQuery(e.target.value)}
            />
          </div>
          
          {/* New Assessment Button */}
          <button
            className="flex items-center space-x-2 bg-blue-600 hover:bg-blue-500 text-white rounded px-3 py-2 text-sm"
            onClick={createNewAssessment}
          >
            <Plus className="h-4 w-4" />
            <span>New Assessment</span>
          </button>
        </div>
      </div>
      
      {error && (
        <div className="bg-red-500/20 border border-red-500 text-white p-4 mb-6 rounded">
          {error}
        </div>
      )}
      
      {/* Main Content */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {/* Assessment List */}
        <div className="bg-gray-800 rounded-lg p-4 max-h-[600px] overflow-y-auto">
          <h3 className="text-lg font-medium text-white mb-4">Your Assessments</h3>
          
          {filteredAssessments.length > 0 ? (
            <div className="space-y-3">
              {filteredAssessments.map(assessment => (
                <div 
                  key={assessment.id} 
                  className={`rounded-lg p-4 cursor-pointer transition-colors ${
                    selectedAssessment?.id === assessment.id 
                      ? 'bg-gray-700 border-l-4 border-blue-500' 
                      : 'bg-gray-750 hover:bg-gray-700'
                  }`}
                  onClick={() => {
                    setSelectedAssessment(assessment);
                    setIsEditing(false);
                    setPreviewMode(false);
                  }}
                >
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <h4 className="text-white font-medium">{assessment.title}</h4>
                      <div className="text-gray-400 text-sm mt-1 line-clamp-2">
                        {assessment.description}
                      </div>
                    </div>
                  </div>
                  
                  <div className="flex items-center justify-between mt-3">
                    <div className="flex items-center">
                      <span className={`inline-block w-2 h-2 rounded-full ${getStatusColor(assessment.status)} mr-2`}></span>
                      <span className="text-gray-300 text-xs capitalize">{assessment.status}</span>
                    </div>
                    <div className="text-gray-400 text-xs">
                      {assessment.questions.length} questions
                    </div>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-8">
              <ClipboardList className="h-12 w-12 mx-auto mb-4 text-gray-600" />
              <p className="text-gray-400">No assessments found</p>
              <button
                className="mt-4 text-blue-400 hover:text-blue-300 text-sm"
                onClick={() => setSearchQuery('')}
              >
                Clear search
              </button>
            </div>
          )}
        </div>
        
        {/* Assessment Details */}
        {selectedAssessment ? (
          <div className="bg-gray-800 rounded-lg p-4 md:col-span-2 max-h-[600px] overflow-y-auto">
            <div className="flex items-center justify-between mb-6">
              <div>
                <div className="flex items-center">
                  <h3 className="text-xl font-semibold text-white">
                    {isEditing ? (
                      <input
                        type="text"
                        className="bg-gray-700 text-white rounded px-2 py-1"
                        value={selectedAssessment.title}
                        onChange={(e: any) => {
                          const updatedAssessment = {
                            ...selectedAssessment,
                            title: e.target.value,
                            updatedAt: Date.now()
                          };
                          setSelectedAssessment(updatedAssessment);
                          setAssessments(assessments.map(a => a.id === updatedAssessment.id ? updatedAssessment : a));
                        }}
                      />
                    ) : (
                      selectedAssessment.title
                    )}
                  </h3>
                </div>
                <div className="flex items-center mt-2">
                  <span className={`inline-block w-2 h-2 rounded-full ${getStatusColor(selectedAssessment.status)} mr-2`}></span>
                  <span className="text-gray-300 text-sm capitalize">{selectedAssessment.status}</span>
                </div>
              </div>
              
              <div className="flex items-center space-x-2">
                {!isEditing && (
                  <>
                    <button 
                      className="bg-gray-700 hover:bg-gray-600 text-white rounded p-2"
                      onClick={() => setPreviewMode(!previewMode)}
                    >
                      <Eye className="h-4 w-4" />
                    </button>
                    <button 
                      className="bg-gray-700 hover:bg-gray-600 text-white rounded p-2"
                      onClick={() => setIsEditing(true)}
                    >
                      <Edit className="h-4 w-4" />
                    </button>
                  </>
                )}
                
                {isEditing && (
                  <>
                    <button 
                      className="bg-green-600 hover:bg-green-500 text-white rounded px-3 py-1 text-sm"
                      onClick={() => setIsEditing(false)}
                    >
                      <Save className="h-4 w-4 mr-1 inline" />
                      Save
                    </button>
                  </>
                )}
              </div>
            </div>
            
            {/* Assessment Content */}
            {previewMode ? (
              <div className="space-y-6">
                <div className="bg-gray-750 rounded-lg p-4">
                  <h4 className="text-white font-medium mb-2">Instructions</h4>
                  <p className="text-gray-300">{selectedAssessment.instructions}</p>
                  
                  {selectedAssessment.timeLimit && (
                    <div className="mt-2 text-gray-400 text-sm">
                      Time Limit: {selectedAssessment.timeLimit} minutes
                    </div>
                  )}
                </div>
                
                <div className="space-y-4">
                  {selectedAssessment.questions.map((question, index) => (
                    <div key={question.id} className="bg-gray-750 rounded-lg p-4">
                      <div className="flex items-start">
                        <div className="bg-gray-700 rounded-full w-6 h-6 flex items-center justify-center text-white text-xs mr-3">
                          {index + 1}
                        </div>
                        <div className="flex-1">
                          <h5 className="text-white font-medium">{question.text}</h5>
                          <div className="text-gray-400 text-xs mt-1">
                            {question.points} {question.points === 1 ? 'point' : 'points'} • {question.required ? 'Required' : 'Optional'}
                          </div>
                          
                          {question.type === 'multiple-choice' && question.options && (
                            <div className="mt-3 space-y-2">
                              {question.options.map(option => (
                                <div key={option.id} className="flex items-center">
                                  <div className="w-4 h-4 rounded-full border border-gray-500 mr-2"></div>
                                  <span className="text-gray-300">{option.text}</span>
                                </div>
                              ))}
                            </div>
                          )}
                          
                          {question.type === 'short-answer' && (
                            <div className="mt-3">
                              <div className="bg-gray-700 rounded p-3 h-20"></div>
                            </div>
                          )}
                          
                          {question.type === 'essay' && (
                            <div className="mt-3">
                              <div className="bg-gray-700 rounded p-3 h-32"></div>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            ) : isEditing ? (
              <div className="space-y-6">
                {/* Assessment Details */}
                <div className="bg-gray-750 rounded-lg p-4">
                  <h4 className="text-white font-medium mb-3">Assessment Details</h4>
                  
                  <div className="space-y-4">
                    <div>
                      <label className="block text-gray-400 text-sm mb-1">Description</label>
                      <textarea
                        className="w-full bg-gray-700 text-white rounded px-3 py-2 text-sm"
                        rows={3}
                        value={selectedAssessment.description}
                        onChange={(e: any) => {
                          const updatedAssessment = {
                            ...selectedAssessment,
                            description: e.target.value,
                            updatedAt: Date.now()
                          };
                          setSelectedAssessment(updatedAssessment);
                          setAssessments(assessments.map(a => a.id === updatedAssessment.id ? updatedAssessment : a));
                        }}
                      />
                    </div>
                    
                    <div>
                      <label className="block text-gray-400 text-sm mb-1">Instructions</label>
                      <textarea
                        className="w-full bg-gray-700 text-white rounded px-3 py-2 text-sm"
                        rows={3}
                        value={selectedAssessment.instructions}
                        onChange={(e: any) => {
                          const updatedAssessment = {
                            ...selectedAssessment,
                            instructions: e.target.value,
                            updatedAt: Date.now()
                          };
                          setSelectedAssessment(updatedAssessment);
                          setAssessments(assessments.map(a => a.id === updatedAssessment.id ? updatedAssessment : a));
                        }}
                      />
                    </div>
                  </div>
                </div>
                
                {/* Questions */}
                <div className="bg-gray-750 rounded-lg p-4">
                  <div className="flex items-center justify-between mb-3">
                    <h4 className="text-white font-medium">Questions</h4>
                    
                    <div className="relative">
                      <button 
                        className="bg-blue-600 hover:bg-blue-500 text-white rounded px-3 py-1 text-sm flex items-center"
                        onClick={() => addNewQuestion('multiple-choice')}
                      >
                        <Plus className="h-4 w-4 mr-1" />
                        Add Question
                      </button>
                    </div>
                  </div>
                  
                  {selectedAssessment.questions.length > 0 ? (
                    <div className="space-y-3">
                      {selectedAssessment.questions.map((question, index) => (
                        <div 
                          key={question.id} 
                          className="bg-gray-700 rounded-lg p-3"
                        >
                          <div className="flex items-start">
                            <div className="bg-gray-600 rounded-full w-6 h-6 flex items-center justify-center text-white text-xs mr-3">
                              {index + 1}
                            </div>
                            <div>
                              <div className="flex items-center">
                                {getQuestionTypeIcon(question.type)}
                                <span className="text-white text-sm ml-2">{question.text}</span>
                              </div>
                              <div className="text-gray-400 text-xs mt-1">
                                {question.points} {question.points === 1 ? 'point' : 'points'} • {question.required ? 'Required' : 'Optional'}
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center py-8">
                      <FileText className="h-12 w-12 mx-auto mb-4 text-gray-600" />
                      <p className="text-gray-400">No questions added yet</p>
                      <p className="text-gray-500 text-sm mt-2">Click "Add Question" to get started</p>
                    </div>
                  )}
                </div>
              </div>
            ) : (
              <div className="space-y-6">
                <div className="bg-gray-750 rounded-lg p-4">
                  <h4 className="text-white font-medium mb-2">Description</h4>
                  <p className="text-gray-300">{selectedAssessment.description}</p>
                </div>
                
                <div className="bg-gray-750 rounded-lg p-4">
                  <h4 className="text-white font-medium mb-2">Details</h4>
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div>
                      <div className="text-gray-400 text-sm">Status</div>
                      <div className="text-white capitalize">{selectedAssessment.status}</div>
                    </div>
                    <div>
                      <div className="text-gray-400 text-sm">Questions</div>
                      <div className="text-white">{selectedAssessment.questions.length}</div>
                    </div>
                    <div>
                      <div className="text-gray-400 text-sm">Created</div>
                      <div className="text-white">{formatDate(selectedAssessment.createdAt)}</div>
                    </div>
                    <div>
                      <div className="text-gray-400 text-sm">Last Updated</div>
                      <div className="text-white">{formatDate(selectedAssessment.updatedAt)}</div>
                    </div>
                  </div>
                </div>
                
                <div className="bg-gray-750 rounded-lg p-4">
                  <h4 className="text-white font-medium mb-2">Questions</h4>
                  <div className="space-y-3">
                    {selectedAssessment.questions.map((question, index) => (
                      <div key={question.id} className="bg-gray-700 rounded-lg p-3">
                        <div className="flex items-start">
                          <div className="bg-gray-600 rounded-full w-6 h-6 flex items-center justify-center text-white text-xs mr-3">
                            {index + 1}
                          </div>
                          <div>
                            <div className="flex items-center">
                              {getQuestionTypeIcon(question.type)}
                              <span className="text-white text-sm ml-2">{question.text}</span>
                            </div>
                            <div className="text-gray-400 text-xs mt-1">
                              {question.points} {question.points === 1 ? 'point' : 'points'} • {question.required ? 'Required' : 'Optional'}
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}
          </div>
        ) : (
          <div className="bg-gray-800 rounded-lg p-4 md:col-span-2 flex items-center justify-center">
            <div className="text-center">
              <ClipboardList className="h-16 w-16 mx-auto mb-4 text-gray-600" />
              <p className="text-gray-400">Select an assessment to view details</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default AssessmentCreationTool;