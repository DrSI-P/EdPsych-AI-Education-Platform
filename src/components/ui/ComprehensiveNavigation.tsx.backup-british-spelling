'use client';

import React, { useEffect, useState } from 'react';
import { useTheme } from '@/components/theme-provider';
import { cn } from '@/lib/utils';
import Logo from '@/components/ui/Logo';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import {
  Home,
  BookOpen,
  Users,
  BarChart,
  Settings,
  Menu,
  X,
  LogOut,
  CreditCard,
  Sparkles,
  Compass
} from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import { usePathname } from 'next/navigation';
import dynamic from 'next/dynamic';
import { signOut } from 'next-auth/react';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';

const useSession = dynamic(() => import('next-auth/react').then(mod => mod.useSession), { ssr: false });
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { Badge } from '@/components/ui/badge';
import { usePredictiveCaching } from '@/lib/predictive-caching';

interface ComprehensiveNavigationProps {
  className?: string;
}

/**
 * Comprehensive Navigation Component
 * 
 * An AI-enhanced navigation bar that adapts to user behaviour,
 * predicts likely navigation paths, and provides personalized
 * navigation suggestions whilst maintaining the brand identity.
 */
const ComprehensiveNavigation: React.FC<ComprehensiveNavigationProps> = ({
  className,
}) => {
  const { ageGroup, isReducedMotion } = useTheme();
  const pathname = usePathname();
  // Add fallback for SSR/SSG when session might be undefined
  const { data: session } = useSession({ required: false }) || { data: null };
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [predictedPaths, setPredictedPaths] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  
  // Use the predictive caching hook
  const predictiveCaching = usePredictiveCaching(
    session?.user?.id || 'anonymous',
    pathname || '/'
  );
  
  // Base navigation items
  const baseNavigationItems = [
    {
      name: 'Home',
      href: '/',
      icon: <Home className="h-5 w-5" />,
    },
    {
      name: 'Student Portal',
      href: '/student',
      icon: <BookOpen className="h-5 w-5" />,
    },
    {
      name: 'Educator Resources',
      href: '/educator',
      icon: <Users className="h-5 w-5" />,
    },
    {
      name: 'Analytics',
      href: '/analytics',
      icon: <BarChart className="h-5 w-5" />,
    },
    {
      name: 'Subscriptions',
      href: '/subscriptions',
      icon: <CreditCard className="h-5 w-5" />,
    },
    {
      name: 'Credits',
      href: '/credits',
      icon: <CreditCard className="h-5 w-5" />,
    },
    {
      name: 'Settings',
      href: '/settings',
      icon: <Settings className="h-5 w-5" />,
    },
  ];
  
  // Load predicted paths when component mounts or pathname changes
  useEffect(() => {
    const loadPredictions = async () => {
      if (!session?.user?.id) return;
      
      setIsLoading(true);
      try {
        const result = await predictiveCaching.preloadResources();
        setPredictedPaths(result.nextPaths);
      } catch (error) {
        console.error('Error loading navigation predictions:', error);
      } finally {
        setIsLoading(false);
      }
    };
    
    loadPredictions();
  }, [pathname, session?.user?.id, predictiveCaching]);
  
  // Enhance navigation items with prediction data
  const navigationItems = baseNavigationItems.map(item => {
    const isPredicted = predictedPaths.includes(item.href);
    return {
      ...item,
      isPredicted,
    };
  });
  
  // Add recommended items that aren't in the base navigation
  const recommendedItems = predictedPaths
    .filter(path => !baseNavigationItems.some(item => item.href === path))
    .map(path => {
      // Create a name from the path
      const name = path.split('/').pop() || path;
      const formattedName = name
        .split('-')
        .map(word => word.charAt(0).toUpperCase() + word.slice(1))
        .join(' ');
      
      return {
        name: formattedName,
        href: path,
        icon: <Compass className="h-5 w-5" />,
        isPredicted: true,
        isRecommended: true,
      };
    });
  
  // Combine base and recommended items
  const allNavigationItems = [...navigationItems, ...recommendedItems];
  
  // Toggle mobile menu
  const toggleMobileMenu = (): void => {
    setIsMobileMenuOpen(!isMobileMenuOpen);
  };
  
  // Close mobile menu
  const closeMobileMenu = (): void => {
    setIsMobileMenuOpen(false);
  };
  
  // Animation variants
  const mobileMenuAnimation = {
    hidden: { opacity: 0, y: -20, scale: 0.95 },
    visible: { opacity: 1, y: 0, scale: 1, transition: { duration: 0.2 } },
    exit: { opacity: 0, y: -20, scale: 0.95, transition: { duration: 0.2 } },
  };
  
  const mobileMenuItemAnimation = {
    hidden: { opacity: 0, x: -20 },
    visible: { opacity: 1, x: 0, transition: { duration: 0.2 } },
  };
  
  // Render desktop navigation
  const renderDesktopNavigation = (): void => {
    return (
      <div className="hidden md:flex md:items-centre md:space-x-4">
        {navigationItems.map((item) => (
          <TooltipProvider key={item.href}>
            <Tooltip>
              <TooltipTrigger asChild>
                <Link
                  href={item.href}
                  className={cn(
                    'flex items-centre gap-2 relative',
                    styles.navItem,
                    pathname === item.href ? styles.activeNavItem : styles.inactiveNavItem,
                    item.isPredicted && styles.predictedNavItem
                  )}
                >
                  {item.icon}
                  <span>{item.name}</span>
                  {item.isPredicted && (
                    <Badge variant="outline" className="absolute -top-2 -right-2 h-4 w-4 p-0 flex items-centre justify-centre">
                      <Sparkles className="h-3 w-3 text-primary" />
                    </Badge>
                  )}
                </Link>
              </TooltipTrigger>
              <TooltipContent>
                {item.isPredicted ? 'Recommended based on your usage patterns' : item.name}
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        ))}
        
        {/* Recommended items dropdown */}
        {recommendedItems.length > 0 && (
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" size="sm" className="gap-2">
                <Compass className="h-4 w-4" />
                <span>Recommended</span>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent>
              <DropdownMenuLabel>Recommended for You</DropdownMenuLabel>
              <DropdownMenuSeparator />
              {recommendedItems.map((item) => (
                <DropdownMenuItem key={item.href} asChild>
                  <Link href={item.href} className="flex items-centre gap-2">
                    {item.icon}
                    <span>{item.name}</span>
                  </Link>
                </DropdownMenuItem>
              ))}
            </DropdownMenuContent>
          </DropdownMenu>
        )}
      </div>
    );
  };
  
  // Render mobile navigation
  const renderMobileNavigation = (): void => {
    return (
      <div className="md:hidden">
        <Button
          variant="ghost"
          size="icon"
          onClick={toggleMobileMenu}
          className="relative z-50"
        >
          {isMobileMenuOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
        </Button>
        
        <AnimatePresence>
          {isMobileMenuOpen && (
            <motion.div
              className="fixed inset-0 z-40 bg-background/80 backdrop-blur-sm"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              onClick={closeMobileMenu}
            >
              <motion.div
                className={cn(
                  "fixed top-16 left-4 right-4 z-50 bg-card p-4 shadow-lg",
                  styles.mobileNav
                )}
                variants={mobileMenuAnimation}
                initial="hidden"
                animate="visible"
                exit="exit"
                onClick={(e: any) => e.stopPropagation()}
              >
                <div className="flex flex-col space-y-2">
                  {/* Recommended section */}
                  {recommendedItems.length > 0 && (
                    <>
                      <div className="px-3 py-2 text-sm font-medium text-muted-foreground">
                        Recommended for You
                      </div>
                      {recommendedItems.map((item) => (
                        <motion.div key={item.href} variants={mobileMenuItemAnimation}>
                          <Link
                            href={item.href}
                            className={cn(
                              'flex items-centre gap-3 p-3 relative',
                              styles.navItem,
                              styles.predictedNavItem,
                              pathname === item.href ? styles.activeNavItem : styles.inactiveNavItem
                            )}
                            onClick={closeMobileMenu}
                          >
                            {item.icon}
                            <span>{item.name}</span>
                            <Sparkles className="h-3 w-3 text-primary absolute right-3" />
                          </Link>
                        </motion.div>
                      ))}
                      <div className="border-t my-2"></div>
                    </>
                  )}
                  
                  {/* Regular navigation */}
                  {navigationItems.map((item) => (
                    <motion.div key={item.href} variants={mobileMenuItemAnimation}>
                      <Link
                        href={item.href}
                        className={cn(
                          'flex items-centre gap-3 p-3 relative',
                          styles.navItem,
                          pathname === item.href ? styles.activeNavItem : styles.inactiveNavItem,
                          item.isPredicted && styles.predictedNavItem
                        )}
                        onClick={closeMobileMenu}
                      >
                        {item.icon}
                        <span>{item.name}</span>
                        {item.isPredicted && (
                          <Sparkles className="h-3 w-3 text-primary absolute right-3" />
                        )}
                      </Link>
                    </motion.div>
                  ))}
                  
                  {/* Use optional chaining to safely access session properties */}
                  {session?.user && (
                    <motion.div variants={mobileMenuItemAnimation}>
                      <Button
                        variant="ghost"
                        className="w-full flex items-centre justify-start gap-3 p-3 text-destructive"
                        onClick={() => signOut()}
                      >
                        <LogOut className="h-5 w-5" />
                        <span>Sign Out</span>
                      </Button>
                    </motion.div>
                  )}
                </div>
              </motion.div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    );
  };
  
  // Render user menu
  const renderUserMenu = (): void => {
    if (!session?.user) {
      return (
        <div className="hidden md:block">
          <Link href="/auth/signin">
            <Button variant="outline" size="sm">Sign In</Button>
          </Link>
        </div>
      );
    }
    
    return (
      <div className="hidden md:block">
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" className="relative h-10 w-10 rounded-full">
              <Avatar>
                {/* Use optional chaining to safely access potentially missing properties */}
                <AvatarImage
                  src={(session.user as any)?.image || undefined}
                  alt={session.user.name || 'User'}
                />
                <AvatarFallback>{session.user.name?.charAt(0) || 'U'}</AvatarFallback>
              </Avatar>
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuLabel>My Account</DropdownMenuLabel>
            <DropdownMenuSeparator />
            <DropdownMenuItem asChild>
              <Link href="/profile">Profile</Link>
            </DropdownMenuItem>
            <DropdownMenuItem asChild>
              <Link href="/subscriptions">Subscriptions</Link>
            </DropdownMenuItem>
            <DropdownMenuItem asChild>
              <Link href="/credits">Credits</Link>
            </DropdownMenuItem>
            <DropdownMenuItem asChild>
              <Link href="/settings">Settings</Link>
            </DropdownMenuItem>
            <DropdownMenuSeparator />
            <DropdownMenuItem onClick={() => signOut()}>
              Sign Out
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
    );
  };
  
  return (
    <header className={cn(
      'sticky top-0 z-40 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60',
      className
    )}>
      <div className="container flex h-16 items-centre justify-between">
        <div className="flex items-centre gap-2">
          <Logo variant="default" size="md" />
        </div>
        
        {renderDesktopNavigation()}
        
        <div className="flex items-centre gap-2">
          {renderUserMenu()}
          {renderMobileNavigation()}
        </div>
      </div>
    </header>
  );
};

// Define styles
const styles = {
  navItem: 'px-3 py-2 text-sm font-medium transition-colors',
  activeNavItem: 'text-primary',
  inactiveNavItem: 'text-muted-foreground hover:text-primary',
  predictedNavItem: 'border-l-2 border-primary pl-2',
  mobileNav: 'rounded-lg',
};

export default ComprehensiveNavigation;