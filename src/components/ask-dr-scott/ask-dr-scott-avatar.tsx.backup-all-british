'use client';

import React, { useState, useEffect, useRef } from 'react';
import { AIAvatarVideoPlayer } from '@/components/ai-avatar/ai-avatar-video-player';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Send, Mic, MicOff, MessageCircle } from 'lucide-react';
import { Skeleton } from '@/components/ui/skeleton';

interface AskDrScottAvatarProps {
  avatarId?: string;
  initialMessage?: string;
  className?: string;
}

/**
 * AskDrScottAvatar Component
 * 
 * This component provides an interactive avatar interface for the "Ask Dr. Scott" feature
 * using the HeyGen API for streaming avatar video.
 */
export const AskDrScottAvatar: React.FC<AskDrScottAvatarProps> = ({
  avatarId = 'e12f05f24ead42619b4aa8124d98880d', // Default to the provided avatar ID
  initialMessage = "Hello, I'm Dr. Scott I-Patrick. How can I help you today?",
  className = ''
}) => {
  const [sessionId, setSessionId] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [isListening, setIsListening] = useState(false);
  const [userInput, setUserInput] = useState('');
  const [messages, setMessages] = useState<Array<{text: string, sender: 'user' | 'avatar', timestamp: Date}>>([]);
  const [error, setError] = useState<string | null>(null);
  const [videoUrl, setVideoUrl] = useState<string | null>(null);
  
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  // Initialize session on component mount
  useEffect(() => {
    initializeSession();
    
    // Cleanup on unmount
    return () => {
      if (sessionId) {
        closeSession(sessionId);
      }
    };
  }, []);

  // Scroll to bottom of messages when new ones are added
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behaviour: 'smooth' });
  }, [messages]);

  // Add initial message from Dr. Scott
  useEffect(() => {
    if (initialMessage && messages.length === 0) {
      setMessages([
        {
          text: initialMessage,
          sender: 'avatar',
          timestamp: new Date()
        }
      ]);
    }
  }, [initialMessage]);

  /**
   * Initialize a new HeyGen streaming session
   */
  const initializeSession = async () => {
    try {
      setIsLoading(true);
      setError(null);
      
      const response = await fetch('/api/heygen/streaming/new', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          avatar_id: avatarId
        })
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to initialize avatar session');
      }
      
      const data = await response.json();
      setSessionId(data.session_id);
      
      // Set video URL for the streaming session
      setVideoUrl(`/api/heygen/streaming/${data.session_id}`);
      
      setIsLoading(false);
    } catch (err) {
      console.error('Error initializing avatar session:', err);
      setError(err instanceof Error ? err.message : 'Failed to initialize avatar');
      setIsLoading(false);
    }
  };

  /**
   * Close the HeyGen streaming session
   */
  const closeSession = async (sid: string) => {
    try {
      await fetch(`/api/heygen/streaming/${sid}/close`, {
        method: 'POST'
      });
      console.log('Session closed successfully');
    } catch (err) {
      console.error('Error closing session:', err);
    }
  };

  /**
   * Send a message to the avatar
   */
  const sendMessage = async () => {
    if (!userInput.trim() || !sessionId || isSpeaking) return;
    
    const messageText = userInput.trim();
    setUserInput('');
    
    // Add user message to the chat
    setMessages(prev => [
      ...prev,
      {
        text: messageText,
        sender: 'user',
        timestamp: new Date()
      }
    ]);
    
    try {
      setIsSpeaking(true);
      
      const response = await fetch(`/api/heygen/streaming/${sessionId}/message`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          text: messageText
        })
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to send message');
      }
      
      const data = await response.json();
      
      // Add avatar response to the chat
      setMessages(prev => [
        ...prev,
        {
          text: data.text,
          sender: 'avatar',
          timestamp: new Date()
        }
      ]);
      
    } catch (err) {
      console.error('Error sending message:', err);
      setError(err instanceof Error ? err.message : 'Failed to communicate with avatar');
    } finally {
      setIsSpeaking(false);
      // Focus the input field after response
      inputRef.current?.focus();
    }
  };

  /**
   * Handle input form submission
   */
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    sendMessage();
  };

  /**
   * Toggle speech recognition for voice input
   */
  const toggleListening = (): void => {
    // This is a placeholder for speech recognition functionality
    // In a real implementation, we would use the Web Speech API
    if (isListening) {
      setIsListening(false);
      // Stop listening logic would go here
    } else {
      setIsListening(true);
      // Start listening logic would go here
    }
  };

  if (isLoading) {
    return (
      <div className={`ask-dr-scott-avatar ${className}`}>
        <Card className="border shadow-md">
          <CardHeader className="bg-gradient-to-r from-blue-600 to-purple-600 text-white">
            <CardTitle className="text-xl flex items-center">
              <MessageCircle className="w-5 h-5 mr-2" />
              Ask Dr. Scott
            </CardTitle>
          </CardHeader>
          <CardContent className="p-4">
            <div className="space-y-4">
              <Skeleton className="w-full aspect-video rounded-lg" />
              <Skeleton className="h-10 w-full" />
              <Skeleton className="h-20 w-full" />
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (error) {
    return (
      <div className={`ask-dr-scott-avatar ${className}`}>
        <Card className="border shadow-md">
          <CardHeader className="bg-gradient-to-r from-blue-600 to-purple-600 text-white">
            <CardTitle className="text-xl flex items-center">
              <MessageCircle className="w-5 h-5 mr-2" />
              Ask Dr. Scott
            </CardTitle>
          </CardHeader>
          <CardContent className="p-4">
            <div className="p-4 border border-red-300 bg-red-50 rounded-lg">
              <h3 className="text-red-700 font-medium">Error Loading Avatar</h3>
              <p className="text-red-600">{error}</p>
              <Button 
                variant="outline" 
                className="mt-2" 
                onClick={initializeSession}
              >
                Try Again
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className={`ask-dr-scott-avatar ${className}`}>
      <Card className="border shadow-md">
        <CardHeader className="bg-gradient-to-r from-blue-600 to-purple-600 text-white">
          <CardTitle className="text-xl flex items-center">
            <MessageCircle className="w-5 h-5 mr-2" />
            Ask Dr. Scott
          </CardTitle>
        </CardHeader>
        <CardContent className="p-4">
          <div className="space-y-4">
            {/* Avatar Video Player */}
            {videoUrl && (
              <div className="rounded-lg overflow-hidden">
                <AIAvatarVideoPlayer
                  videoId={avatarId}
                  autoPlay={true}
                  showControls={true}
                  showCaptions={true}
                  onError={(err) => setError(err.message)}
                />
              </div>
            )}
            
            {/* Chat Messages */}
            <div className="bg-gray-50 rounded-lg p-3 h-48 overflow-y-auto">
              {messages.map((message, index) => (
                <div 
                  key={index} 
                  className={`mb-3 ${message.sender === 'user' ? 'text-right' : ''}`}
                >
                  <div 
                    className={`inline-block px-3 py-2 rounded-lg ${
                      message.sender === 'user' 
                        ? 'bg-blue-600 text-white' 
                        : 'bg-gray-200 text-gray-800'
                    }`}
                  >
                    {message.text}
                  </div>
                  <div className="text-xs text-gray-500 mt-1">
                    {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                  </div>
                </div>
              ))}
              <div ref={messagesEndRef} />
            </div>
            
            {/* Input Form */}
            <form onSubmit={handleSubmit} className="flex space-x-2">
              <Input
                ref={inputRef}
                type="text"
                placeholder={isSpeaking ? "Dr. Scott is responding..." : "Type your question..."}
                value={userInput}
                onChange={(e: any) => setUserInput(e.target.value)}
                disabled={isSpeaking}
                className="flex-grow"
              />
              <Button 
                type="button" 
                variant="outline" 
                size="icon"
                onClick={toggleListening}
                disabled={isSpeaking}
              >
                {isListening ? <MicOff className="h-5 w-5" /> : <Mic className="h-5 w-5" />}
              </Button>
              <Button 
                type="submit" 
                disabled={!userInput.trim() || isSpeaking}
                className="bg-gradient-to-r from-blue-600 to-purple-600 text-white"
              >
                <Send className="h-5 w-5" />
              </Button>
            </form>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default AskDrScottAvatar;