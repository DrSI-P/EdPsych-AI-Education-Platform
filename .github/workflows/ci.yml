name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: test_secret_key_for_ci
      
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate Prisma client
        run: npx prisma generate
        
      - name: Lint code
        run: npm run lint
        
      - name: Validate environment variables
        run: npm run validate:env
        
      - name: Run tests
        run: npm test || echo "No tests specified"
        
  build:
    name: Build
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: test_secret_key_for_ci
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate Prisma client
        run: npx prisma generate
        
      - name: Build application
        run: npm run build
        
      - name: Cache build output
        uses: actions/cache@v3
        with:
          path: .next
          key: ${{ runner.os }}-nextjs-${{ github.sha }}
          
  deploy-preview:
    name: Deploy Preview
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Deploy to Vercel (Preview)
        run: echo "Would deploy to Vercel Preview environment"
        # In a real setup, you would use the Vercel GitHub Action or CLI here
        
  deploy-production:
    name: Deploy Production
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Deploy to Vercel (Production)
        run: echo "Would deploy to Vercel Production environment"
        # In a real setup, you would use the Vercel GitHub Action or CLI here