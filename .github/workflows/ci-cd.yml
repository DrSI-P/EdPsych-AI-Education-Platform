# GitHub Actions workflow for EdPsych-AI-Education-Platform
# This workflow handles CI/CD for the platform, including testing, building, and deployment

name: EdPsych CI/CD Pipeline

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main, development]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  test:
    name: Run Tests
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Jest tests
        run: npm test

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: coverage/
        if: always()

  build:
    name: Build Application
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: .next/

  deploy-staging:
    name: Deploy to Staging
    needs: build
    if: github.ref == 'refs/heads/development' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-output
          path: .next/

      - name: Deploy to Vercel (Staging)
        run: |
          vercel deploy --token ${{ secrets.VERCEL_TOKEN }} \
            --env DATABASE_URL=${{ secrets.DATABASE_URL }} \
            --env NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} \
            --env NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }} \
            --env OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            --env ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }} \
            --env GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
            --env GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} \
            --env VEED_API_KEY=${{ secrets.VEED_API_KEY }} \
            --env SIMLI_API_KEY=${{ secrets.SIMLI_API_KEY }} \
            --env ELEVENLABS_API_KEY=${{ secrets.ELEVENLABS_API_KEY }} \
            --env HEYGEN_API_KEY=${{ secrets.HEYGEN_API_KEY }} \
            --prod

  deploy-production:
    name: Deploy to Production
    needs: build
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-output
          path: .next/

      - name: Deploy to Vercel (Production)
        run: |
          vercel deploy --token ${{ secrets.VERCEL_TOKEN }} \
            --env DATABASE_URL=${{ secrets.DATABASE_URL }} \
            --env NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} \
            --env NEXTAUTH_URL=https://edpsychconnect.com \
            --env OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            --env ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }} \
            --env GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
            --env GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} \
            --env VEED_API_KEY=${{ secrets.VEED_API_KEY }} \
            --env SIMLI_API_KEY=${{ secrets.SIMLI_API_KEY }} \
            --env ELEVENLABS_API_KEY=${{ secrets.ELEVENLABS_API_KEY }} \
            --env HEYGEN_API_KEY=${{ secrets.HEYGEN_API_KEY }} \
            --prod
